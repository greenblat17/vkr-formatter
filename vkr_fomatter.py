from docx import Document
from docx.shared import Pt, Cm
from docx.enum.text import WD_ALIGN_PARAGRAPH, WD_LINE_SPACING, WD_BREAK
import re
import logging
from typing import Dict, Any, List
from pathlib import Path
import colorlog

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_colored_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    
    # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    color_formatter = colorlog.ColoredFormatter(
        '%(log_color)s%(asctime)s - %(levelname)-8s%(reset)s %(message)s',
        datefmt='%H:%M:%S',
        log_colors={
            'DEBUG': 'cyan',
            'INFO': 'green', 
            'WARNING': 'yellow',
            'ERROR': 'red',
            'CRITICAL': 'red,bg_white',
        },
        secondary_log_colors={},
        style='%'
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º handler
    handler = colorlog.StreamHandler()
    handler.setFormatter(color_formatter)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = colorlog.getLogger(__name__)
    logger.setLevel(logging.INFO)
    logger.handlers.clear()
    logger.addHandler(handler)
    
    return logger

logger = setup_colored_logging()

class SimpleVKRFormatter:
    """–ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –í–ö–†"""
    
    def __init__(self, requirements: Dict[str, Any]):
        """
        Args:
            requirements: —Å–ª–æ–≤–∞—Ä—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –∑–∞–≥–ª—É—à–∫–∏
        """
        self.requirements = requirements
        self.stats = {
            'total_paragraphs': 0,
            'skipped_paragraphs': 0,
            'h1_formatted': 0,
            'h2_formatted': 0,
            'lists_formatted': 0,
            'regular_formatted': 0,
            'errors': 0
        }
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        self.document_state = {
            'in_title_section': True,  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ –º—ã –≤ —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏
            'in_contents_section': False,  # –ù–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            'found_main_content': False,  # –ù–∞—à–ª–∏ –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            'pages_skipped': 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        }
        
        # –ú–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        self.align_map = {
            "left": WD_ALIGN_PARAGRAPH.LEFT,
            "center": WD_ALIGN_PARAGRAPH.CENTER,
            "right": WD_ALIGN_PARAGRAPH.RIGHT,
            "justify": WD_ALIGN_PARAGRAPH.JUSTIFY
        }
        
        self.line_spacing_map = {
            1.0: WD_LINE_SPACING.SINGLE,
            1.5: WD_LINE_SPACING.ONE_POINT_FIVE,
            2.0: WD_LINE_SPACING.DOUBLE
        }
    
    def format_document(self, input_path: str, output_path: str) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Args:
            input_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
            output_path: –ø—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            
        Returns:
            bool: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üìÇ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {input_path}")
            logger.info(f"üíæ –í—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å: {output_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            input_file = Path(input_path)
            if not input_file.exists():
                logger.error(f"‚ùå –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {input_path}")
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            logger.info("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...")
            doc = Document(input_path)
            logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {len(doc.paragraphs)}")
            
            # –®–∞–≥ 1: –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ–ª—è, –±–∞–∑–æ–≤—ã–π —à—Ä–∏—Ñ—Ç)
            logger.info("‚öôÔ∏è  –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
            self._apply_global_settings(doc)
            
            # –®–∞–≥ 2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            logger.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã...")
            self._process_all_paragraphs(doc)
            
            # –®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤: {output_path}")
            doc.save(output_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
            output_file = Path(output_path)
            if output_file.exists():
                logger.info(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: {output_file.stat().st_size} –±–∞–π—Ç")
            else:
                logger.error(f"‚ùå –§–∞–π–ª –ù–ï —Å–æ–∑–¥–∞–ª—Å—è: {output_path}")
                return False
            
            logger.info(f"üéâ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.stats}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            import traceback
            logger.error(f"–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return False
    
    def _apply_global_settings(self, doc: Document) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –ø–æ–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        
        try:
            margins = self.requirements["base_formatting"]["margins_cm"]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª—è –∫–æ –≤—Å–µ–º —Å–µ–∫—Ü–∏—è–º
            for section in doc.sections:
                section.top_margin = Cm(margins["top"])
                section.bottom_margin = Cm(margins["bottom"])
                section.left_margin = Cm(margins["left"])
                section.right_margin = Cm(margins["right"])
            
            logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –ø–æ–ª—è: {margins}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            self.stats['errors'] += 1
    
    def _process_all_paragraphs(self, doc: Document) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤...")
        
        for i, paragraph in enumerate(doc.paragraphs):
            self.stats['total_paragraphs'] += 1
            
            try:
                text = paragraph.text.strip()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
                paragraph_type = self._classify_paragraph(text)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if text:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ
                    logger.debug(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {i+1}: —Ç–∏–ø='{paragraph_type}', —Ç–µ–∫—Å—Ç='{text[:100]}{'...' if len(text) > 100 else ''}'")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                if paragraph_type == "skip":
                    self.stats['skipped_paragraphs'] += 1
                    logger.info(f"‚è≠Ô∏è  –ü–†–û–ü–£–°–ö #{i+1}: {text[:60]}{'...' if len(text) > 60 else ''}")
                    
                elif paragraph_type == "h1":
                    self._format_h1_paragraph(paragraph)
                    self.stats['h1_formatted'] += 1
                    logger.info(f"üìù H1 #{i+1}: {text[:40]}...")
                    
                elif paragraph_type == "h2":
                    self._format_h2_paragraph(paragraph)
                    self.stats['h2_formatted'] += 1
                    logger.info(f"üìÑ H2 #{i+1}: {text[:40]}...")
                    
                elif paragraph_type == "list":
                    self._format_list_paragraph(paragraph)
                    self.stats['lists_formatted'] += 1
                    logger.debug(f"üìã –°–ü–ò–°–û–ö #{i+1}: {text[:40]}...")
                    
                else:  # regular
                    self._format_regular_paragraph(paragraph)
                    self.stats['regular_formatted'] += 1
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ {i+1}: {e}")
                self.stats['errors'] += 1
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.stats}")
    
    def _classify_paragraph(self, text: str) -> str:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Returns:
            str: "skip", "h1", "h2", "list", "regular"
        """
        if not text:
            return "skip"
        
        text_clean = text.strip()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if self._is_contents_header(text_clean):
            logger.info(f"üìë –ù–ê–ß–ê–õ–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø: {text_clean[:50]}...")
            self.document_state['in_contents_section'] = True
            return "skip"
        
        # 2. –ï—Å–ª–∏ –º—ã –≤ —Ä–∞–∑–¥–µ–ª–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        if self.document_state['in_contents_section']:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å
            if self._is_contents_line(text_clean):
                logger.debug(f"üìë –°–û–î–ï–†–ñ–ê–ù–ò–ï (—Å—Ç—Ä–æ–∫–∞): {text_clean[:50]}...")
                return "skip"
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ù–ï —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            if self._is_main_content_start(text_clean):
                logger.info(f"üü¢ –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ê–ù–ò–Ø, –ù–ê–ß–ê–õ–û –û–°–ù–û–í–ù–û–ì–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø: {text_clean[:60]}...")
                self.document_state['in_contents_section'] = False
                self.document_state['in_title_section'] = False
                self.document_state['found_main_content'] = True
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
                if self._is_h1_paragraph_content(text_clean):
                    return "h1"
                elif self._is_h2_paragraph_content(text_clean):
                    return "h2"
                else:
                    return "regular"
            else:
                # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                logger.debug(f"üìë –°–û–î–ï–†–ñ–ê–ù–ò–ï (–ø—Ä–æ—á–µ–µ): {text_clean[:50]}...")
                return "skip"
        
        # 3. –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã (—Ç–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∑–∞–¥–∞–Ω–∏—è –∏ —Ç.–¥.)
        if self._is_title_page_content(text_clean) or self._is_service_content(text_clean):
            logger.debug(f"üî¥ –°–õ–£–ñ–ï–ë–ù–´–ô –†–ê–ó–î–ï–õ: {text_clean[:50]}...")
            return "skip"
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–µ—Å–ª–∏ –º—ã –µ—â–µ –Ω–µ –≤ –Ω–µ–º)
        if not self.document_state['found_main_content'] and self._is_main_content_start(text_clean):
            logger.info(f"üü¢ –ù–ê–ß–ê–õ–û –û–°–ù–û–í–ù–û–ì–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø: {text_clean[:60]}...")
            self.document_state['in_title_section'] = False
            self.document_state['found_main_content'] = True
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ H1)
            if self._is_h1_paragraph_content(text_clean):
                return "h1"
            elif self._is_h2_paragraph_content(text_clean):
                return "h2"
            else:
                return "regular"
        
        # 5. –ï—Å–ª–∏ –º—ã –≤—Å–µ –µ—â–µ –≤ —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        if self.document_state['in_title_section']:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —è–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ä, –Ω–æ –º—ã –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            logger.debug(f"‚ö™ –ü–†–û–ü–£–°–ö (—Ç–∏—Ç—É–ª—å–Ω–∞—è): {text_clean[:50]}...")
            return "skip"
        
        # 4. –ú—ã —É–∂–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ - –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º H1
        if self._is_h1_paragraph_content(text_clean):
            return "h1"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º H2
        if self._is_h2_paragraph_content(text_clean):
            return "h2"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫
        if self._is_list_paragraph(text_clean):
            return "list"
        
        # –û–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
        return "regular"
    
    def _is_main_content_start(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –í–ö–†"""
        
        text_upper = text.upper().strip()
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è (—Å —Ç–æ—á–∫–∞–º–∏ –∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü)
        if self._is_contents_line(text):
            return False
        
        # –ú–∞—Ä–∫–µ—Ä—ã –Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è!)
        main_content_markers = [
            "–í–í–ï–î–ï–ù–ò–ï",
            "–ì–õ–ê–í–ê 1",
            "1. –í–í–ï–î–ï–ù–ò–ï",
            "1 –í–í–ï–î–ï–ù–ò–ï", 
            "CHAPTER 1",
            "–†–ï–§–ï–†–ê–¢",
            "ABSTRACT",
            "–ê–ù–ù–û–¢–ê–¶–ò–Ø"
        ]
        
        # –¢–æ–ª—å–∫–æ –¢–û–ß–ù–´–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        for marker in main_content_markers:
            if text_upper == marker:
                return True
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≥–ª–∞–≤ (–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–æ–Ω—Ü–µ)
        chapter_patterns = [
            r"^–ì–õ–ê–í–ê\s+\d+$",  # "–ì–õ–ê–í–ê 1", "–ì–õ–ê–í–ê 2" (–Ω–æ –ù–ï "–ì–õ–ê–í–ê 1   10")
            r"^\d+\.\s*[–ê-–Ø–Å][–ê-–Ø–Å–∞-—è—ë\s]*$",  # "1. –í–í–ï–î–ï–ù–ò–ï" (–Ω–æ –ù–ï "1. –í–í–ï–î–ï–ù–ò–ï   8")
            r"^\d+\s+[–ê-–Ø–Å][–ê-–Ø–Å–∞-—è—ë\s]*$",    # "1 –í–í–ï–î–ï–ù–ò–ï" (–Ω–æ –ù–ï "1 –í–í–ï–î–ï–ù–ò–ï  8")
        ]
        
        for pattern in chapter_patterns:
            if re.match(pattern, text_upper):
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –Ω–∞ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if not re.search(r'\s+\d+$', text.strip()):
                    return True
        
        return False
    
    def _is_title_page_content(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∏—Ç—É–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        
        text_upper = text.upper()
        
        # –°—Ç—Ä–æ–≥–∏–µ –º–∞—Ä–∫–µ—Ä—ã —Ç–∏—Ç—É–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
        title_markers = [
            "–î–ò–ü–õ–û–ú–ù–ê–Ø –†–ê–ë–û–¢–ê",
            "–í–´–ü–£–°–ö–ù–ê–Ø –ö–í–ê–õ–ò–§–ò–ö–ê–¶–ò–û–ù–ù–ê–Ø –†–ê–ë–û–¢–ê", 
            "–ú–ò–ù–ò–°–¢–ï–†–°–¢–í–û –û–ë–†–ê–ó–û–í–ê–ù–ò–Ø",
            "–ú–ò–ù–ò–°–¢–ï–†–°–¢–í–û –ù–ê–£–ö–ò",
            "–§–ï–î–ï–†–ê–õ–¨–ù–û–ï –ì–û–°–£–î–ê–†–°–¢–í–ï–ù–ù–û–ï",
            "–û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–û–ï –£–ß–†–ï–ñ–î–ï–ù–ò–ï",
            "–í–´–°–®–ï–ì–û –û–ë–†–ê–ó–û–í–ê–ù–ò–Ø",
            "–ö–ê–§–ï–î–†–ê",
            "–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ì–û–¢–û–í–ö–ò",
            "–ü–†–û–§–ò–õ–¨",
            "–¢–ï–ú–ê:",
            "–í–´–ü–û–õ–ù–ò–õ:",
            "–°–¢–£–î–ï–ù–¢",
            "–ì–†–£–ü–ü–´",
            "–ù–ê–£–ß–ù–´–ô –†–£–ö–û–í–û–î–ò–¢–ï–õ–¨",
            "–ö–û–ù–°–£–õ–¨–¢–ê–ù–¢",
            "–î–û–ü–£–©–ï–ù –ö –ó–ê–©–ò–¢–ï",
            "–†–ê–ë–û–¢–ê –í–´–ü–û–õ–ù–ï–ù–ê",
            "–û–¶–ï–ù–ö–ê",
            "–ü–û–î–ü–ò–°–¨"
        ]
        
        for marker in title_markers:
            if marker in text_upper:
                return True
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –§–ò–û –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
        fio_patterns = [
            r"[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å]\.[–ê-–Ø–Å]\.",  # –ò–≤–∞–Ω–æ–≤ –ò.–ò.
            r"[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+",  # –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
        ]
        
        for pattern in fio_patterns:
            if re.search(pattern, text):
                return True
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –∏ —Å–æ—Å—Ç–æ–∏—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–∑ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏—Ç—É–ª—å–Ω–∏–∫–∞)
        if len(text) < 200:
            alpha_chars = [c for c in text if c.isalpha()]
            if alpha_chars:
                upper_ratio = sum(1 for c in alpha_chars if c.isupper()) / len(alpha_chars)
                # –î–ª—è —Ç–∏—Ç—É–ª—å–Ω–∏–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
                if upper_ratio > 0.8 and len(text.split()) <= 5:
                    return True
        
        return False
    
    def _is_contents_header(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
        
        text_upper = text.upper().strip()
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        content_headers = [
            "–°–û–î–ï–†–ñ–ê–ù–ò–ï",
            "–û–ì–õ–ê–í–õ–ï–ù–ò–ï", 
            "CONTENTS",
            "TABLE OF CONTENTS"
        ]
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        for header in content_headers:
            if text_upper == header:
                return True
        
        return False
    
    def _is_contents_line(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è (—Å —Ç–æ—á–∫–∞–º–∏, –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü)"""
        
        text_clean = text.strip()
        
        if not text_clean:
            return False
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        content_patterns = [
            # –° —Ç–æ—á–∫–∞–º–∏ –∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
            r".+\.{3,}.+\d+$",  # "–í–≤–µ–¥–µ–Ω–∏–µ...........3"
            r".+\.{2,}\s*\d+$",  # "1. –û–±–∑–æ—Ä –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã..5" 
            r"^[–ê-–Ø–Å\d\.\s]+\.{3,}\d+$",  # "–ì–õ–ê–í–ê 1...10"
            r"^\d+[\.\s][–ê-–Ø–Å–∞-—è—ë\s]+\.{3,}\d+$",  # "1 –í–≤–µ–¥–µ–Ω–∏–µ.....4"
            r"^\d+\.\d+[\.\s][–ê-–Ø–Å–∞-—è—ë\s]+\.{3,}\d+$",  # "1.1 –ü–æ–¥—Ä–∞–∑–¥–µ–ª.....8"
            
            # –° –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü (–±–µ–∑ —Ç–æ—á–µ–∫)
            r"^[–ê-–Ø–Å–∞-—è—ë\s]+\s+\d+$",  # "–í–≤–µ–¥–µ–Ω–∏–µ    8", "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ   50"
            r"^\d+\.\s*[–ê-–Ø–Å–∞-—è—ë\s]+\s+\d+$",  # "1. –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏   11"
            r"^\d+\s+[–ê-–Ø–Å–∞-—è—ë\s]+\s+\d+$",  # "1 –í–≤–µ–¥–µ–Ω–∏–µ   4"
            r"^\d+\.\d+\s+[–ê-–Ø–Å–∞-—è—ë\s]+\s+\d+$",  # "1.1 –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏   11"
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
            r"^[–ê-–Ø–Å–∞-—è—ë\s,]+\d+$",  # "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è5"
        ]
        
        for pattern in content_patterns:
            if re.search(pattern, text_clean):
                return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —á–∏—Å–ª–æ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞–ª–æ —Å–ª–æ–≤
        # (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è)
        if re.search(r'\d+$', text_clean):
            words = text_clean.split()
            if len(words) >= 2 and len(words) <= 8:  # –û–±—ã—á–Ω–æ —Å—Ç—Ä–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç 2-8 —Å–ª–æ–≤
                # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ - —á–∏—Å–ª–æ (–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
                try:
                    int(words[-1])
                    return True
                except ValueError:
                    pass
        
        return False
    
    def _is_service_content(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥—Ä—É–≥–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã (–∑–∞–¥–∞–Ω–∏–µ, –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ —Ç.–¥.)"""
        
        text_upper = text.upper()
        text_clean = text.strip()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        service_markers = [
            "–ó–ê–î–ê–ù–ò–ï –ù–ê",
            "–ö–ê–õ–ï–ù–î–ê–†–ù–´–ô –ü–õ–ê–ù",
            "–ö–ê–õ–ï–ù–î–ê–†–ù–û-–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô",
            "–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï",
            "–£–¢–í–ï–†–ñ–î–ê–Æ",
            "–†–ê–°–°–ú–û–¢–†–ï–ù–û",
            "–°–û–ì–õ–ê–°–û–í–ê–ù–û",
            "–û–¢–ó–´–í",
            "–†–ï–¶–ï–ù–ó–ò–Ø",
            "–°–ü–†–ê–í–ö–ê –û –í–ù–ï–î–†–ï–ù–ò–ò",
            "–ê–ö–¢ –û –í–ù–ï–î–†–ï–ù–ò–ò"
        ]
        
        for marker in service_markers:
            if marker in text_upper:
                return True
        

        
        return False
    
    def _is_h1_paragraph_content(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º H1 (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è)"""
        
        patterns = self.requirements["h1_formatting"]["detection_patterns"]
        
        for pattern in patterns:
            if re.match(pattern, text.upper().strip()):
                return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç —Å –±–æ–ª—å—à–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
        if len(text) < 100:
            alpha_chars = [c for c in text if c.isalpha()]
            if alpha_chars:
                upper_ratio = sum(1 for c in alpha_chars if c.isupper()) / len(alpha_chars)
                if upper_ratio > 0.7:
                    return True
        
        return False
    
    def _is_h2_paragraph_content(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º H2 (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è)"""
        
        patterns = self.requirements["h2_formatting"]["detection_patterns"]
        
        for pattern in patterns:
            if re.match(pattern, text.strip()):
                return True
        
        return False
    
    def _is_list_paragraph(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —ç–ª–µ–º–µ–Ω—Ç–æ–º —Å–ø–∏—Å–∫–∞"""
        
        patterns = self.requirements["lists"]["bullet_lists"]["detection_patterns"]
        
        for pattern in patterns:
            if re.match(pattern, text):
                return True
        
        return False
    
    def _format_h1_paragraph(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1"""
        
        try:
            h1_config = self.requirements["h1_formatting"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if h1_config["page_break_before"] and self._not_first_paragraph(paragraph):
                self._add_page_break_before(paragraph)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            self._apply_font_formatting(paragraph, h1_config)
            
            # –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
            if h1_config["text_transform"] == "uppercase":
                self._make_text_uppercase(paragraph)
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
            paragraph.alignment = self.align_map[h1_config["alignment"]]
            
            # –û—Ç—Å—Ç—É–ø—ã
            pf = paragraph.paragraph_format
            pf.space_before = Pt(h1_config["space_before_pt"])
            pf.space_after = Pt(h1_config["space_after_pt"])
            
            logger.debug(f"H1 –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {paragraph.text[:30]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è H1: {e}")
            raise
    
    def _format_h2_paragraph(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ H2"""
        
        try:
            h2_config = self.requirements["h2_formatting"]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            self._apply_font_formatting(paragraph, h2_config)
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
            paragraph.alignment = self.align_map[h2_config["alignment"]]
            
            # –û—Ç—Å—Ç—É–ø—ã
            pf = paragraph.paragraph_format
            pf.space_before = Pt(h2_config["space_before_pt"])
            pf.space_after = Pt(h2_config["space_after_pt"])
            pf.left_indent = Cm(h2_config.get("paragraph_indent_cm", 0))
            
            logger.debug(f"H2 –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {paragraph.text[:30]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è H2: {e}")
            raise
    
    def _format_list_paragraph(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞"""
        
        try:
            list_config = self.requirements["lists"]["bullet_lists"]
            font_config = list_config["font"]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç
            self._apply_font_formatting(paragraph, {
                "font_name": font_config["name"],
                "font_size": font_config["size"]
            })
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
            paragraph.alignment = self.align_map[list_config["alignment"]]
            
            # –û—Ç—Å—Ç—É–ø
            pf = paragraph.paragraph_format
            pf.left_indent = Cm(list_config["indent_cm"])
            
            # –ú–µ–∂–¥—É—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            line_spacing = font_config["line_spacing"]
            if line_spacing in self.line_spacing_map:
                pf.line_spacing_rule = self.line_spacing_map[line_spacing]
            
            logger.debug(f"–°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {paragraph.text[:30]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
            raise
    
    def _format_regular_paragraph(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ"""
        
        try:
            if not paragraph.text.strip():
                return
            
            base_config = self.requirements["base_formatting"]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç
            self._apply_font_formatting(paragraph, base_config)
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
            paragraph.alignment = self.align_map[base_config["text_alignment"]]
            
            # –û—Ç—Å—Ç—É–ø—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            pf = paragraph.paragraph_format
            pf.first_line_indent = Cm(base_config["paragraph_indent_cm"])
            
            # –ú–µ–∂–¥—É—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            line_spacing = base_config["line_spacing"]
            if line_spacing in self.line_spacing_map:
                pf.line_spacing_rule = self.line_spacing_map[line_spacing]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {e}")
            raise
    
    def _apply_font_formatting(self, paragraph, config: Dict[str, Any]) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ –∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É"""
        
        # –°–æ–∑–¥–∞–µ–º run –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not paragraph.runs:
            paragraph.add_run()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ –≤—Å–µ–º runs
        for run in paragraph.runs:
            font = run.font
            
            if "font_name" in config:
                font.name = config["font_name"]
            
            if "font_size" in config:
                font.size = Pt(config["font_size"])
            
            if config.get("font_weight") == "bold":
                font.bold = True
    
    def _make_text_uppercase(self, paragraph) -> None:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä"""
        
        original_text = paragraph.text
        paragraph.clear()
        run = paragraph.add_run(original_text.upper())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        font = run.font
        font.name = self.requirements["h1_formatting"]["font_name"]
        font.size = Pt(self.requirements["h1_formatting"]["font_size"])
        if self.requirements["h1_formatting"]["font_weight"] == "bold":
            font.bold = True
    
    def _add_page_break_before(self, paragraph) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–¥ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º"""
        
        if paragraph.runs:
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤ –≤ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–≤–æ–≥–æ run
            first_run = paragraph.runs[0]
            first_run.add_break(WD_BREAK.PAGE)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π run —Å —Ä–∞–∑—Ä—ã–≤–æ–º
            run = paragraph.add_run()
            run.add_break(WD_BREAK.PAGE)
    
    def _not_first_paragraph(self, target_paragraph) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –ø–µ—Ä–≤—ã–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc = target_paragraph._parent
            while hasattr(doc, '_parent') and doc._parent is not None:
                doc = doc._parent
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            for i, paragraph in enumerate(doc.paragraphs):
                if paragraph == target_paragraph:
                    # –ï—Å—Ç—å –ª–∏ –Ω–µ–ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –¥–æ —ç—Ç–æ–≥–æ?
                    for j in range(i):
                        if doc.paragraphs[j].text.strip():
                            return True
                    return False
            
            return True
            
        except Exception:
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π
    
    def get_statistics(self) -> Dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        stats = self.stats.copy()
        stats.update({
            'title_pages_detected': 1 if self.document_state['found_main_content'] else 0,
            'main_content_found': self.document_state['found_main_content'],
            'contents_section_detected': not self.document_state['in_contents_section'] and self.document_state['found_main_content']
        })
        return stats


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API
def format_vkr_document(input_path: str, requirements: Dict[str, Any], output_path: str) -> tuple[bool, Dict[str, int]]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –í–ö–† —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    
    Args:
        input_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –í–ö–†
        requirements: —Å–ª–æ–≤–∞—Ä—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (–∏–∑ –∑–∞–≥–ª—É—à–∫–∏)
        output_path: –ø—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º—É —Ñ–∞–π–ª—É
        
    Returns:
        tuple: (—É—Å–ø–µ—Ö, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    """
    
    formatter = SimpleVKRFormatter(requirements)
    success = formatter.format_document(input_path, output_path)
    stats = formatter.get_statistics()
    
    return success, stats
