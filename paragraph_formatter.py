from docx.shared import Pt, Cm
from docx.enum.text import WD_BREAK
from typing import Dict, Any
from formatting_constants import FormattingConstants
from document_state import logger


class ParagraphFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤"""

    def __init__(self, requirements: Dict[str, Any]):
        self.requirements = requirements

    def format_h1(self, paragraph, h1_count_before: int = 0) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1 —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ì–û–°–¢"""
        try:
            config = self.requirements["h1_formatting"]
            
            logger.info(f"üî§ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ H1: {paragraph.text[:50]}...")

            # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if config.get("text_transform") == "uppercase":
                self._make_text_uppercase(paragraph, config)
                logger.debug("   ‚Ü≥ –¢–µ–∫—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ –ó–ê–ì–õ–ê–í–ù–´–ï –ë–£–ö–í–´")

            # 2. –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ä–∏—Ñ—Ç –∏ —Ä–∞–∑–º–µ—Ä
            self._apply_font_formatting(paragraph, config)
            logger.debug(f"   ‚Ü≥ –®—Ä–∏—Ñ—Ç: {config['font_name']}, {config['font_size']}pt, –∂–∏—Ä–Ω—ã–π")

            # 3. –†–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º (–∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ H1 –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ)
            # –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤ –ü–û–°–õ–ï –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π!
            if config.get("page_break_before", False) and h1_count_before > 0:
                self._add_page_break_before(paragraph)
                logger.debug(f"   ‚Ü≥ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (H1 #{h1_count_before + 1})")
            else:
                logger.debug(f"   ‚Ü≥ –†–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω (–ø–µ—Ä–≤—ã–π H1 –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ)")

            # 4. –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
            paragraph.alignment = FormattingConstants.ALIGN_MAP[config["alignment"]]
            logger.debug(f"   ‚Ü≥ –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: {config['alignment']}")

            # 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
            pf = paragraph.paragraph_format
            
            # –û—Ç—Å—Ç—É–ø—ã –¥–æ –∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            pf.space_before = Pt(config["space_before_pt"])
            pf.space_after = Pt(config["space_after_pt"])
            
            # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            pf.first_line_indent = Cm(0)
            pf.left_indent = Cm(0)
            pf.right_indent = Cm(0)
            
            # –ú–µ–∂–¥—É—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–æ–±—ã—á–Ω–æ –æ–¥–∏–Ω–∞—Ä–Ω—ã–π)
            pf.line_spacing_rule = FormattingConstants.LINE_SPACING_MAP.get(1.0)
            
            logger.debug(f"   ‚Ü≥ –û—Ç—Å—Ç—É–ø—ã: –¥–æ={config['space_before_pt']}pt, –ø–æ—Å–ª–µ={config['space_after_pt']}pt")
            logger.info(f"‚úÖ H1 –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {paragraph.text[:40]}...")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è H1: {e}")
            raise

    def format_h2(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ H2"""
        try:
            config = self.requirements["h2_formatting"]

            self._apply_font_formatting(paragraph, config)
            paragraph.alignment = FormattingConstants.ALIGN_MAP[config["alignment"]]

            pf = paragraph.paragraph_format
            pf.space_before = Pt(config["space_before_pt"])
            pf.space_after = Pt(config["space_after_pt"])
            pf.left_indent = Cm(config.get("paragraph_indent_cm", 0))

            logger.debug(f"H2 –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {paragraph.text[:30]}...")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è H2: {e}")
            raise

    def format_h3(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ H3"""
        try:
            config = self.requirements["h3_formatting"]

            self._apply_font_formatting(paragraph, config)
            paragraph.alignment = FormattingConstants.ALIGN_MAP[config["alignment"]]

            pf = paragraph.paragraph_format
            pf.space_before = Pt(config["space_before_pt"])
            pf.space_after = Pt(config["space_after_pt"])
            pf.left_indent = Cm(config.get("paragraph_indent_cm", 0))

            logger.debug(f"H3 –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {paragraph.text[:30]}...")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è H3: {e}")
            raise

    def format_h4(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ H4"""
        try:
            config = self.requirements["h4_formatting"]

            self._apply_font_formatting(paragraph, config)
            paragraph.alignment = FormattingConstants.ALIGN_MAP[config["alignment"]]

            pf = paragraph.paragraph_format
            pf.space_before = Pt(config["space_before_pt"])
            pf.space_after = Pt(config["space_after_pt"])
            pf.left_indent = Cm(config.get("paragraph_indent_cm", 0))

            logger.debug(f"H4 –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {paragraph.text[:30]}...")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è H4: {e}")
            raise

    def format_list(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞"""
        try:
            config = self.requirements["lists"]["bullet_lists"]
            font_config = config["font"]

            self._apply_font_formatting(paragraph, {
                "font_name": font_config["name"],
                "font_size": font_config["size"]
            })

            paragraph.alignment = FormattingConstants.ALIGN_MAP[config["alignment"]]

            pf = paragraph.paragraph_format
            pf.left_indent = Cm(config["indent_cm"])

            line_spacing = font_config["line_spacing"]
            if line_spacing in FormattingConstants.LINE_SPACING_MAP:
                pf.line_spacing_rule = FormattingConstants.LINE_SPACING_MAP[line_spacing]

            logger.debug(f"–°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {paragraph.text[:30]}...")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
            raise

    def format_regular(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–æ–≥–ª–∞—Å–Ω–æ –±–∞–∑–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ì–û–°–¢"""
        try:
            if not paragraph.text.strip():
                return

            config = self.requirements["base_formatting"]

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ä–∏—Ñ—Ç –∏ —Ä–∞–∑–º–µ—Ä
            self._apply_font_formatting(paragraph, config)
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —à–∏—Ä–∏–Ω–µ
            paragraph.alignment = FormattingConstants.ALIGN_MAP[config["text_alignment"]]

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
            pf = paragraph.paragraph_format
            
            # –û—Ç—Å—Ç—É–ø –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–∫—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
            pf.first_line_indent = Cm(config["paragraph_indent_cm"])
            
            # –ú–µ–∂–¥—É—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            line_spacing = config["line_spacing"]
            if line_spacing in FormattingConstants.LINE_SPACING_MAP:
                pf.line_spacing_rule = FormattingConstants.LINE_SPACING_MAP[line_spacing]
            
            # –£–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏
            pf.space_before = Pt(0)
            pf.space_after = Pt(0)
            
            # –£–±–∏—Ä–∞–µ–º –ª–µ–≤—ã–π –æ—Ç—Å—Ç—É–ø (—Ç–æ–ª—å–∫–æ –∫—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
            pf.left_indent = Cm(0)
            pf.right_indent = Cm(0)

            logger.debug(f"–û–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {paragraph.text[:30]}...")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {e}")
            raise

    def _apply_font_formatting(self, paragraph, config: Dict[str, Any]) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞"""
        if not paragraph.runs:
            paragraph.add_run()

        for run in paragraph.runs:
            font = run.font

            if "font_name" in config:
                font.name = config["font_name"]

            if "font_size" in config:
                font.size = Pt(config["font_size"])

            if config.get("font_weight") == "bold":
                font.bold = True

    def _make_text_uppercase(self, paragraph, config: Dict[str, Any]) -> None:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä"""
        original_text = paragraph.text
        paragraph.clear()
        run = paragraph.add_run(original_text.upper())

        font = run.font
        font.name = config["font_name"]
        font.size = Pt(config["font_size"])
        if config["font_weight"] == "bold":
            font.bold = True

    def _add_page_break_before(self, paragraph) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–¥ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–π—Å—Ç–≤–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–æ page_break_before –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
            # –≠—Ç–æ –±–æ–ª–µ–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, —á–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä—ã–≤–∞
            pf = paragraph.paragraph_format
            pf.page_break_before = True
            
            logger.debug(f"   ‚úÖ –†–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {paragraph.text[:30]}...")
            
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ä–∞–∑—Ä—ã–≤–∞
            try:
                if paragraph.runs:
                    first_run = paragraph.runs[0]
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ run
                    original_text = first_run.text
                    # –û—á–∏—â–∞–µ–º run
                    first_run.clear()
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    first_run.add_break(WD_BREAK.PAGE)
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
                    first_run.add_text(original_text)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç runs, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å —Ä–∞–∑—Ä—ã–≤–æ–º
                    run = paragraph.add_run()
                    run.add_break(WD_BREAK.PAGE)
                    
                logger.debug(f"   ‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                
            except Exception as fallback_error:
                logger.error(f"   ‚ùå Fallback –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {fallback_error}")

    def _should_add_page_break_for_h1(self, target_paragraph) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è H1 –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—á–µ—Ç—á–∏–∫ H1 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –±—ã–ª –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π H1 –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤
            # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–æ–π –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc = target_paragraph._parent
            while hasattr(doc, '_parent') and doc._parent is not None:
                doc = doc._parent

            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ H1 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –î–û —Ç–µ–∫—É—â–µ–≥–æ
            h1_count_before = 0
            target_found = False
            
            for paragraph in doc.paragraphs:
                if paragraph == target_paragraph:
                    target_found = True
                    break
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ H1 –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                if self._is_h1_heading(paragraph):
                    h1_count_before += 1
            
            # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω, —ç—Ç–æ –æ—à–∏–±–∫–∞
            if not target_found:
                logger.warning("   ‚ö†Ô∏è  –¶–µ–ª–µ–≤–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
                return False
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –ø–µ—Ä–≤—ã–π H1 –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ - –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤
            should_break = h1_count_before > 0
            
            logger.debug(f"   üîç H1 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ: {h1_count_before}, —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {should_break}")
            return should_break

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è H1: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
            return False

    def _is_h1_heading(self, paragraph) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ H1 –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å—Ç–∏–ª—é
            if hasattr(paragraph, 'style') and paragraph.style:
                style_name = paragraph.style.name
                h1_styles = [
                    "Heading 1", "–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1", "Title", "–ù–∞–∑–≤–∞–Ω–∏–µ", "Header 1", "H1"
                ]
                
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if style_name in h1_styles:
                    return True
                
                # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                style_lower = style_name.lower()
                for h1_style in h1_styles:
                    if h1_style.lower() in style_lower:
                        return True
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É (fallback)
            text = paragraph.text.strip().upper()
            if text:
                # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è H1
                import re
                h1_patterns = [
                    r"^\d+\.\s*[–ê-–Ø–Å\s]+$",           # "1. –í–í–ï–î–ï–ù–ò–ï"
                    r"^–ì–õ–ê–í–ê\s+\d+",                   # "–ì–õ–ê–í–ê 1"
                    r"^(–í–í–ï–î–ï–ù–ò–ï|–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï|–†–ï–§–ï–†–ê–¢)$",  # —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
                    r"^[IVX]+\.\s*[–ê-–Ø–Å\s]+$"        # "I. –í–í–ï–î–ï–ù–ò–ï"
                ]
                
                for pattern in h1_patterns:
                    if re.match(pattern, text):
                        return True
            
            return False
            
        except Exception:
            return False

    def _not_first_paragraph(self, target_paragraph) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –ø–µ—Ä–≤—ã–π (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)"""
        try:
            doc = target_paragraph._parent
            while hasattr(doc, '_parent') and doc._parent is not None:
                doc = doc._parent

            for i, paragraph in enumerate(doc.paragraphs):
                if paragraph == target_paragraph:
                    for j in range(i):
                        if doc.paragraphs[j].text.strip():
                            return True
                    return False

            return True

        except Exception:
            return True
