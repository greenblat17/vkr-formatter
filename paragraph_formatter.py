from docx.shared import Pt, Cm
from docx.enum.text import WD_BREAK
from typing import Dict, Any
from formatting_constants import FormattingConstants
from document_state import logger


class ParagraphFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤"""

    def __init__(self, requirements: Dict[str, Any]):
        self.requirements = requirements

    def format_h1(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1 —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ì–û–°–¢"""
        try:
            config = self.requirements["h1_formatting"]
            
            logger.info(f"üî§ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ H1: {paragraph.text[:50]}...")

            # 1. –†–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ)
            if config.get("page_break_before", False) and self._not_first_paragraph(paragraph):
                self._add_page_break_before(paragraph)
                logger.debug("   ‚Ü≥ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

            # 2. –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ä–∏—Ñ—Ç –∏ —Ä–∞–∑–º–µ—Ä
            self._apply_font_formatting(paragraph, config)
            logger.debug(f"   ‚Ü≥ –®—Ä–∏—Ñ—Ç: {config['font_name']}, {config['font_size']}pt, –∂–∏—Ä–Ω—ã–π")

            # 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
            if config.get("text_transform") == "uppercase":
                self._make_text_uppercase(paragraph, config)
                logger.debug("   ‚Ü≥ –¢–µ–∫—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ –ó–ê–ì–õ–ê–í–ù–´–ï –ë–£–ö–í–´")

            # 4. –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
            paragraph.alignment = FormattingConstants.ALIGN_MAP[config["alignment"]]
            logger.debug(f"   ‚Ü≥ –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: {config['alignment']}")

            # 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
            pf = paragraph.paragraph_format
            
            # –û—Ç—Å—Ç—É–ø—ã –¥–æ –∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            pf.space_before = Pt(config["space_before_pt"])
            pf.space_after = Pt(config["space_after_pt"])
            
            # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            pf.first_line_indent = Cm(0)
            pf.left_indent = Cm(0)
            pf.right_indent = Cm(0)
            
            # –ú–µ–∂–¥—É—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–æ–±—ã—á–Ω–æ –æ–¥–∏–Ω–∞—Ä–Ω—ã–π)
            pf.line_spacing_rule = FormattingConstants.LINE_SPACING_MAP.get(1.0)
            
            logger.debug(f"   ‚Ü≥ –û—Ç—Å—Ç—É–ø—ã: –¥–æ={config['space_before_pt']}pt, –ø–æ—Å–ª–µ={config['space_after_pt']}pt")
            logger.info(f"‚úÖ H1 –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {paragraph.text[:40]}...")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è H1: {e}")
            raise

    def format_h2(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ H2"""
        try:
            config = self.requirements["h2_formatting"]

            self._apply_font_formatting(paragraph, config)
            paragraph.alignment = FormattingConstants.ALIGN_MAP[config["alignment"]]

            pf = paragraph.paragraph_format
            pf.space_before = Pt(config["space_before_pt"])
            pf.space_after = Pt(config["space_after_pt"])
            pf.left_indent = Cm(config.get("paragraph_indent_cm", 0))

            logger.debug(f"H2 –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {paragraph.text[:30]}...")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è H2: {e}")
            raise

    def format_list(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞"""
        try:
            config = self.requirements["lists"]["bullet_lists"]
            font_config = config["font"]

            self._apply_font_formatting(paragraph, {
                "font_name": font_config["name"],
                "font_size": font_config["size"]
            })

            paragraph.alignment = FormattingConstants.ALIGN_MAP[config["alignment"]]

            pf = paragraph.paragraph_format
            pf.left_indent = Cm(config["indent_cm"])

            line_spacing = font_config["line_spacing"]
            if line_spacing in FormattingConstants.LINE_SPACING_MAP:
                pf.line_spacing_rule = FormattingConstants.LINE_SPACING_MAP[line_spacing]

            logger.debug(f"–°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {paragraph.text[:30]}...")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
            raise

    def format_regular(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–æ–≥–ª–∞—Å–Ω–æ –±–∞–∑–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ì–û–°–¢"""
        try:
            if not paragraph.text.strip():
                return

            config = self.requirements["base_formatting"]

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ä–∏—Ñ—Ç –∏ —Ä–∞–∑–º–µ—Ä
            self._apply_font_formatting(paragraph, config)
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —à–∏—Ä–∏–Ω–µ
            paragraph.alignment = FormattingConstants.ALIGN_MAP[config["text_alignment"]]

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
            pf = paragraph.paragraph_format
            
            # –û—Ç—Å—Ç—É–ø –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–∫—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
            pf.first_line_indent = Cm(config["paragraph_indent_cm"])
            
            # –ú–µ–∂–¥—É—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            line_spacing = config["line_spacing"]
            if line_spacing in FormattingConstants.LINE_SPACING_MAP:
                pf.line_spacing_rule = FormattingConstants.LINE_SPACING_MAP[line_spacing]
            
            # –£–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏
            pf.space_before = Pt(0)
            pf.space_after = Pt(0)
            
            # –£–±–∏—Ä–∞–µ–º –ª–µ–≤—ã–π –æ—Ç—Å—Ç—É–ø (—Ç–æ–ª—å–∫–æ –∫—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
            pf.left_indent = Cm(0)
            pf.right_indent = Cm(0)

            logger.debug(f"–û–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {paragraph.text[:30]}...")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {e}")
            raise

    def _apply_font_formatting(self, paragraph, config: Dict[str, Any]) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞"""
        if not paragraph.runs:
            paragraph.add_run()

        for run in paragraph.runs:
            font = run.font

            if "font_name" in config:
                font.name = config["font_name"]

            if "font_size" in config:
                font.size = Pt(config["font_size"])

            if config.get("font_weight") == "bold":
                font.bold = True

    def _make_text_uppercase(self, paragraph, config: Dict[str, Any]) -> None:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä"""
        original_text = paragraph.text
        paragraph.clear()
        run = paragraph.add_run(original_text.upper())

        font = run.font
        font.name = config["font_name"]
        font.size = Pt(config["font_size"])
        if config["font_weight"] == "bold":
            font.bold = True

    def _add_page_break_before(self, paragraph) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if paragraph.runs:
            first_run = paragraph.runs[0]
            first_run.add_break(WD_BREAK.PAGE)
        else:
            run = paragraph.add_run()
            run.add_break(WD_BREAK.PAGE)

    def _not_first_paragraph(self, target_paragraph) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –ø–µ—Ä–≤—ã–π"""
        try:
            doc = target_paragraph._parent
            while hasattr(doc, '_parent') and doc._parent is not None:
                doc = doc._parent

            for i, paragraph in enumerate(doc.paragraphs):
                if paragraph == target_paragraph:
                    for j in range(i):
                        if doc.paragraphs[j].text.strip():
                            return True
                    return False

            return True

        except Exception:
            return True
