from docx import Document
from docx.shared import Pt, Cm
from docx.enum.text import WD_ALIGN_PARAGRAPH, WD_LINE_SPACING, WD_BREAK
import re
import logging
from typing import Dict, Any, List, Tuple
from pathlib import Path
import colorlog
from abc import ABC, abstractmethod

# ============================================================================
# CONSTANTS AND CONFIGURATION
# ============================================================================

class FormattingConstants:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    ALIGN_MAP = {
        "left": WD_ALIGN_PARAGRAPH.LEFT,
        "center": WD_ALIGN_PARAGRAPH.CENTER,
        "right": WD_ALIGN_PARAGRAPH.RIGHT,
        "justify": WD_ALIGN_PARAGRAPH.JUSTIFY
    }
    
    # –ú–µ–∂–¥—É—Å—Ç—Ä–æ—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    LINE_SPACING_MAP = {
        1.0: WD_LINE_SPACING.SINGLE,
        1.5: WD_LINE_SPACING.ONE_POINT_FIVE,
        2.0: WD_LINE_SPACING.DOUBLE
    }
    
    # –ú–∞—Ä–∫–µ—Ä—ã —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    CONTENT_HEADERS = [
        "–°–û–î–ï–†–ñ–ê–ù–ò–ï", "–û–ì–õ–ê–í–õ–ï–ù–ò–ï", "CONTENTS", "TABLE OF CONTENTS"
    ]
    
    # –ú–∞—Ä–∫–µ—Ä—ã –Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    MAIN_CONTENT_MARKERS = [
        "–í–í–ï–î–ï–ù–ò–ï", "–ì–õ–ê–í–ê 1", "1. –í–í–ï–î–ï–ù–ò–ï", "1 –í–í–ï–î–ï–ù–ò–ï", 
        "CHAPTER 1", "–†–ï–§–ï–†–ê–¢", "ABSTRACT", "–ê–ù–ù–û–¢–ê–¶–ò–Ø"
    ]
    
    # –ú–∞—Ä–∫–µ—Ä—ã —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    TITLE_PAGE_MARKERS = [
        "–î–ò–ü–õ–û–ú–ù–ê–Ø –†–ê–ë–û–¢–ê", "–í–´–ü–£–°–ö–ù–ê–Ø –ö–í–ê–õ–ò–§–ò–ö–ê–¶–ò–û–ù–ù–ê–Ø –†–ê–ë–û–¢–ê", 
        "–ú–ò–ù–ò–°–¢–ï–†–°–¢–í–û –û–ë–†–ê–ó–û–í–ê–ù–ò–Ø", "–ú–ò–ù–ò–°–¢–ï–†–°–¢–í–û –ù–ê–£–ö–ò",
        "–§–ï–î–ï–†–ê–õ–¨–ù–û–ï –ì–û–°–£–î–ê–†–°–¢–í–ï–ù–ù–û–ï", "–û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–û–ï –£–ß–†–ï–ñ–î–ï–ù–ò–ï",
        "–í–´–°–®–ï–ì–û –û–ë–†–ê–ó–û–í–ê–ù–ò–Ø", "–ö–ê–§–ï–î–†–ê", "–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ì–û–¢–û–í–ö–ò",
        "–ü–†–û–§–ò–õ–¨", "–¢–ï–ú–ê:", "–í–´–ü–û–õ–ù–ò–õ:", "–°–¢–£–î–ï–ù–¢", "–ì–†–£–ü–ü–´",
        "–ù–ê–£–ß–ù–´–ô –†–£–ö–û–í–û–î–ò–¢–ï–õ–¨", "–ö–û–ù–°–£–õ–¨–¢–ê–ù–¢", "–î–û–ü–£–©–ï–ù –ö –ó–ê–©–ò–¢–ï",
        "–†–ê–ë–û–¢–ê –í–´–ü–û–õ–ù–ï–ù–ê", "–û–¶–ï–ù–ö–ê", "–ü–û–î–ü–ò–°–¨"
    ]
    
    # –ú–∞—Ä–∫–µ—Ä—ã —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    SERVICE_MARKERS = [
        "–ó–ê–î–ê–ù–ò–ï –ù–ê", "–ö–ê–õ–ï–ù–î–ê–†–ù–´–ô –ü–õ–ê–ù", "–ö–ê–õ–ï–ù–î–ê–†–ù–û-–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô",
        "–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï", "–£–¢–í–ï–†–ñ–î–ê–Æ", "–†–ê–°–°–ú–û–¢–†–ï–ù–û",
        "–°–û–ì–õ–ê–°–û–í–ê–ù–û", "–û–¢–ó–´–í", "–†–ï–¶–ï–ù–ó–ò–Ø", "–°–ü–†–ê–í–ö–ê –û –í–ù–ï–î–†–ï–ù–ò–ò",
        "–ê–ö–¢ –û –í–ù–ï–î–†–ï–ù–ò–ò"
    ]

# ============================================================================
# LOGGING SETUP
# ============================================================================

def setup_colored_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    color_formatter = colorlog.ColoredFormatter(
        '%(log_color)s%(asctime)s - %(levelname)-8s%(reset)s %(message)s',
        datefmt='%H:%M:%S',
        log_colors={
            'DEBUG': 'cyan', 'INFO': 'green', 'WARNING': 'yellow',
            'ERROR': 'red', 'CRITICAL': 'red,bg_white',
        },
        style='%'
    )
    
    handler = colorlog.StreamHandler()
    handler.setFormatter(color_formatter)
    
    logger = colorlog.getLogger(__name__)
    logger.setLevel(logging.INFO)
    logger.handlers.clear()
    logger.addHandler(handler)
    
    return logger

logger = setup_colored_logging()

# ============================================================================
# DOCUMENT STATE MANAGEMENT
# ============================================================================

class DocumentState:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.in_title_section = True
        self.in_contents_section = False
        self.found_main_content = False
        self.pages_skipped = 0
    
    def start_contents_section(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
        self.in_contents_section = True
        logger.info("üìë –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è")
    
    def start_main_content(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"""
        self.in_title_section = False
        self.in_contents_section = False
        self.found_main_content = True
        logger.info("üü¢ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é")
    
    def is_in_service_section(self) -> bool:
        """–ù–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Å–ª—É–∂–µ–±–Ω–æ–π —Å–µ–∫—Ü–∏–∏"""
        return self.in_title_section or self.in_contents_section
    
    def get_state_info(self) -> Dict[str, bool]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        return {
            'in_title_section': self.in_title_section,
            'in_contents_section': self.in_contents_section,
            'found_main_content': self.found_main_content
        }

# ============================================================================
# CONTENT DETECTION AND ANALYSIS
# ============================================================================

class ContentDetector:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
    
    @staticmethod
    def is_title_page_content(text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∏—Ç—É–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        text_upper = text.upper()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for marker in FormattingConstants.TITLE_PAGE_MARKERS:
            if marker in text_upper:
                return True
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –§–ò–û
        fio_patterns = [
            r"[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å]\.[–ê-–Ø–Å]\.",  # –ò–≤–∞–Ω–æ–≤ –ò.–ò.
            r"[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+",  # –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
        ]
        
        for pattern in fio_patterns:
            if re.search(pattern, text):
                return True
        
        # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
        if len(text) < 200:
            alpha_chars = [c for c in text if c.isalpha()]
            if alpha_chars:
                upper_ratio = sum(1 for c in alpha_chars if c.isupper()) / len(alpha_chars)
                if upper_ratio > 0.8 and len(text.split()) <= 5:
                    return True
        
        return False
    
    @staticmethod
    def is_contents_header(text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
        text_upper = text.upper().strip()
        return text_upper in FormattingConstants.CONTENT_HEADERS
    
    @staticmethod
    def is_contents_line(text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü"""
        text_clean = text.strip()
        
        if not text_clean:
            return False
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        content_patterns = [
            # –° —Ç–æ—á–∫–∞–º–∏ –∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
            r".+\.{3,}.+\d+$",  # "–í–≤–µ–¥–µ–Ω–∏–µ...........3"
            r".+\.{2,}\s*\d+$",  # "1. –û–±–∑–æ—Ä –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã..5" 
            r"^[–ê-–Ø–Å\d\.\s]+\.{3,}\d+$",  # "–ì–õ–ê–í–ê 1...10"
            r"^\d+[\.\s][–ê-–Ø–Å–∞-—è—ë\s]+\.{3,}\d+$",  # "1 –í–≤–µ–¥–µ–Ω–∏–µ.....4"
            r"^\d+\.\d+[\.\s][–ê-–Ø–Å–∞-—è—ë\s]+\.{3,}\d+$",  # "1.1 –ü–æ–¥—Ä–∞–∑–¥–µ–ª.....8"
            
            # –° –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü (–±–µ–∑ —Ç–æ—á–µ–∫)
            r"^[–ê-–Ø–Å–∞-—è—ë\s]+\s+\d+$",  # "–í–≤–µ–¥–µ–Ω–∏–µ    8"
            r"^\d+\.\s*[–ê-–Ø–Å–∞-—è—ë\s]+\s+\d+$",  # "1. –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏   11"
            r"^\d+\s+[–ê-–Ø–Å–∞-—è—ë\s]+\s+\d+$",  # "1 –í–≤–µ–¥–µ–Ω–∏–µ   4"
            r"^\d+\.\d+\s+[–ê-–Ø–Å–∞-—è—ë\s]+\s+\d+$",  # "1.1 –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏   11"
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
            r"^[–ê-–Ø–Å–∞-—è—ë\s,]+\d+$",  # "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è5"
        ]
        
        for pattern in content_patterns:
            if re.search(pattern, text_clean):
                return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞–ª–æ —Å–ª–æ–≤
        if re.search(r'\d+$', text_clean):
            words = text_clean.split()
            if 2 <= len(words) <= 8:
                try:
                    int(words[-1])
                    return True
                except ValueError:
                    pass
        
        return False
    
    @staticmethod
    def is_service_content(text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã"""
        text_upper = text.upper()
        
        for marker in FormattingConstants.SERVICE_MARKERS:
            if marker in text_upper:
                return True
        
        return False
    
    @staticmethod
    def is_main_content_start(text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
        text_upper = text.upper().strip()
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if ContentDetector.is_contents_line(text):
            return False
        
        # –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
        for marker in FormattingConstants.MAIN_CONTENT_MARKERS:
            if text_upper == marker:
                return True
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≥–ª–∞–≤ (–±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∫–æ–Ω—Ü–µ)
        chapter_patterns = [
            r"^–ì–õ–ê–í–ê\s+\d+$",  # "–ì–õ–ê–í–ê 1"
            r"^\d+\.\s*[–ê-–Ø–Å][–ê-–Ø–Å–∞-—è—ë\s]*$",  # "1. –í–í–ï–î–ï–ù–ò–ï"
            r"^\d+\s+[–ê-–Ø–Å][–ê-–Ø–Å–∞-—è—ë\s]*$",    # "1 –í–í–ï–î–ï–ù–ò–ï"
        ]
        
        for pattern in chapter_patterns:
            if re.match(pattern, text_upper):
                if not re.search(r'\s+\d+$', text.strip()):
                    return True
        
        return False

# ============================================================================
# PARAGRAPH CLASSIFICATION
# ============================================================================

class ParagraphClassifier:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø—ã –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤"""
    
    def __init__(self, requirements: Dict[str, Any]):
        self.requirements = requirements
        self.detector = ContentDetector()
        self.state = DocumentState()
    
    def classify_paragraph(self, text: str) -> str:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ
        
        Returns:
            str: "skip", "h1", "h2", "list", "regular"
        """
        if not text:
            return "skip"
        
        text_clean = text.strip()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if self.detector.is_contents_header(text_clean):
            logger.info(f"üìë –ù–ê–ß–ê–õ–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø: {text_clean[:50]}...")
            self.state.start_contents_section()
            return "skip"
        
        # 2. –ï—Å–ª–∏ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏
        if self.state.in_contents_section:
            return self._classify_in_contents_section(text_clean)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        if (self.detector.is_title_page_content(text_clean) or 
            self.detector.is_service_content(text_clean)):
            logger.debug(f"üî¥ –°–õ–£–ñ–ï–ë–ù–´–ô –†–ê–ó–î–ï–õ: {text_clean[:50]}...")
            return "skip"
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if (not self.state.found_main_content and 
            self.detector.is_main_content_start(text_clean)):
            logger.info(f"üü¢ –ù–ê–ß–ê–õ–û –û–°–ù–û–í–ù–û–ì–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø: {text_clean[:60]}...")
            self.state.start_main_content()
            return self._classify_content_paragraph(text_clean)
        
        # 5. –ï—Å–ª–∏ –≤ —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        if self.state.in_title_section:
            logger.debug(f"‚ö™ –ü–†–û–ü–£–°–ö (—Ç–∏—Ç—É–ª—å–Ω–∞—è): {text_clean[:50]}...")
            return "skip"
        
        # 6. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        return self._classify_content_paragraph(text_clean)
    
    def _classify_in_contents_section(self, text_clean: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –≤ —Ä–∞–∑–¥–µ–ª–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if self.detector.is_contents_line(text_clean):
            logger.debug(f"üìë –°–û–î–ï–†–ñ–ê–ù–ò–ï (—Å—Ç—Ä–æ–∫–∞): {text_clean[:50]}...")
            return "skip"
        
        # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        if self.detector.is_main_content_start(text_clean):
            logger.info(f"üü¢ –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ê–ù–ò–Ø, –ù–ê–ß–ê–õ–û –û–°–ù–û–í–ù–û–ì–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø: {text_clean[:60]}...")
            self.state.start_main_content()
            return self._classify_content_paragraph(text_clean)
        else:
            # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏
            logger.debug(f"üìë –°–û–î–ï–†–ñ–ê–ù–ò–ï (–ø—Ä–æ—á–µ–µ): {text_clean[:50]}...")
            return "skip"
    
    def _classify_content_paragraph(self, text_clean: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
        if self._is_h1_paragraph(text_clean):
            return "h1"
        elif self._is_h2_paragraph(text_clean):
            return "h2"
        elif self._is_list_paragraph(text_clean):
            return "list"
        else:
            return "regular"
    
    def _is_h1_paragraph(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        patterns = self.requirements["h1_formatting"]["detection_patterns"]
        
        for pattern in patterns:
            if re.match(pattern, text.upper().strip()):
                return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç —Å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏
        if len(text) < 100:
            alpha_chars = [c for c in text if c.isalpha()]
            if alpha_chars:
                upper_ratio = sum(1 for c in alpha_chars if c.isupper()) / len(alpha_chars)
                if upper_ratio > 0.7:
                    return True
        
        return False
    
    def _is_h2_paragraph(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç H2 –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        patterns = self.requirements["h2_formatting"]["detection_patterns"]
        
        for pattern in patterns:
            if re.match(pattern, text.strip()):
                return True
        
        return False
    
    def _is_list_paragraph(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞"""
        patterns = self.requirements["lists"]["bullet_lists"]["detection_patterns"]
        
        for pattern in patterns:
            if re.match(pattern, text):
                return True
        
        return False
    
    def get_state(self) -> DocumentState:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        return self.state

# ============================================================================
# PARAGRAPH FORMATTING
# ============================================================================

class ParagraphFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤"""
    
    def __init__(self, requirements: Dict[str, Any]):
        self.requirements = requirements
    
    def format_h1(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1"""
        try:
            config = self.requirements["h1_formatting"]
            
            # –†–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if config["page_break_before"] and self._not_first_paragraph(paragraph):
                self._add_page_break_before(paragraph)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._apply_font_formatting(paragraph, config)
            
            # –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
            if config["text_transform"] == "uppercase":
                self._make_text_uppercase(paragraph, config)
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç—Å—Ç—É–ø—ã
            paragraph.alignment = FormattingConstants.ALIGN_MAP[config["alignment"]]
            
            pf = paragraph.paragraph_format
            pf.space_before = Pt(config["space_before_pt"])
            pf.space_after = Pt(config["space_after_pt"])
            
            logger.debug(f"H1 –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {paragraph.text[:30]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è H1: {e}")
            raise
    
    def format_h2(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ H2"""
        try:
            config = self.requirements["h2_formatting"]
            
            self._apply_font_formatting(paragraph, config)
            paragraph.alignment = FormattingConstants.ALIGN_MAP[config["alignment"]]
            
            pf = paragraph.paragraph_format
            pf.space_before = Pt(config["space_before_pt"])
            pf.space_after = Pt(config["space_after_pt"])
            pf.left_indent = Cm(config.get("paragraph_indent_cm", 0))
            
            logger.debug(f"H2 –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {paragraph.text[:30]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è H2: {e}")
            raise
    
    def format_list(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞"""
        try:
            config = self.requirements["lists"]["bullet_lists"]
            font_config = config["font"]
            
            self._apply_font_formatting(paragraph, {
                "font_name": font_config["name"],
                "font_size": font_config["size"]
            })
            
            paragraph.alignment = FormattingConstants.ALIGN_MAP[config["alignment"]]
            
            pf = paragraph.paragraph_format
            pf.left_indent = Cm(config["indent_cm"])
            
            line_spacing = font_config["line_spacing"]
            if line_spacing in FormattingConstants.LINE_SPACING_MAP:
                pf.line_spacing_rule = FormattingConstants.LINE_SPACING_MAP[line_spacing]
            
            logger.debug(f"–°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {paragraph.text[:30]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
            raise
    
    def format_regular(self, paragraph) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ"""
        try:
            if not paragraph.text.strip():
                return
            
            config = self.requirements["base_formatting"]
            
            self._apply_font_formatting(paragraph, config)
            paragraph.alignment = FormattingConstants.ALIGN_MAP[config["text_alignment"]]
            
            pf = paragraph.paragraph_format
            pf.first_line_indent = Cm(config["paragraph_indent_cm"])
            
            line_spacing = config["line_spacing"]
            if line_spacing in FormattingConstants.LINE_SPACING_MAP:
                pf.line_spacing_rule = FormattingConstants.LINE_SPACING_MAP[line_spacing]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {e}")
            raise
    
    def _apply_font_formatting(self, paragraph, config: Dict[str, Any]) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞"""
        if not paragraph.runs:
            paragraph.add_run()
        
        for run in paragraph.runs:
            font = run.font
            
            if "font_name" in config:
                font.name = config["font_name"]
            
            if "font_size" in config:
                font.size = Pt(config["font_size"])
            
            if config.get("font_weight") == "bold":
                font.bold = True
    
    def _make_text_uppercase(self, paragraph, config: Dict[str, Any]) -> None:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä"""
        original_text = paragraph.text
        paragraph.clear()
        run = paragraph.add_run(original_text.upper())
        
        font = run.font
        font.name = config["font_name"]
        font.size = Pt(config["font_size"])
        if config["font_weight"] == "bold":
            font.bold = True
    
    def _add_page_break_before(self, paragraph) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if paragraph.runs:
            first_run = paragraph.runs[0]
            first_run.add_break(WD_BREAK.PAGE)
        else:
            run = paragraph.add_run()
            run.add_break(WD_BREAK.PAGE)
    
    def _not_first_paragraph(self, target_paragraph) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –ø–µ—Ä–≤—ã–π"""
        try:
            doc = target_paragraph._parent
            while hasattr(doc, '_parent') and doc._parent is not None:
                doc = doc._parent
            
            for i, paragraph in enumerate(doc.paragraphs):
                if paragraph == target_paragraph:
                    for j in range(i):
                        if doc.paragraphs[j].text.strip():
                            return True
                    return False
            
            return True
            
        except Exception:
            return True

# ============================================================================
# STATISTICS TRACKING
# ============================================================================

class StatisticsTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self):
        self.stats = {
            'total_paragraphs': 0,
            'skipped_paragraphs': 0,
            'h1_formatted': 0,
            'h2_formatted': 0,
            'lists_formatted': 0,
            'regular_formatted': 0,
            'errors': 0
        }
    
    def increment(self, stat_name: str):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫"""
        if stat_name in self.stats:
            self.stats[stat_name] += 1
    
    def get_statistics(self, state: DocumentState) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.stats.copy()
        stats.update({
            'title_pages_detected': 1 if state.found_main_content else 0,
            'main_content_found': state.found_main_content,
            'contents_section_detected': not state.in_contents_section and state.found_main_content
        })
        return stats

# ============================================================================
# MAIN FORMATTER CLASS
# ============================================================================

class VKRFormatter:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –í–ö–†"""
    
    def __init__(self, requirements: Dict[str, Any]):
        self.requirements = requirements
        self.classifier = ParagraphClassifier(requirements)
        self.formatter = ParagraphFormatter(requirements)
        self.stats = StatisticsTracker()
    
    def format_document(self, input_path: str, output_path: str) -> bool:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç"""
        try:
            logger.info(f"üìÇ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {input_path}")
            logger.info(f"üíæ –í—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å: {output_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            input_file = Path(input_path)
            if not input_file.exists():
                logger.error(f"‚ùå –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {input_path}")
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            logger.info("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...")
            doc = Document(input_path)
            logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {len(doc.paragraphs)}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            logger.info("‚öôÔ∏è  –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
            self._apply_global_settings(doc)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
            logger.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã...")
            self._process_all_paragraphs(doc)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤: {output_path}")
            doc.save(output_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_file = Path(output_path)
            if output_file.exists():
                logger.info(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: {output_file.stat().st_size} –±–∞–π—Ç")
            else:
                logger.error(f"‚ùå –§–∞–π–ª –ù–ï —Å–æ–∑–¥–∞–ª—Å—è: {output_path}")
                return False
            
            final_stats = self.get_statistics()
            logger.info(f"üéâ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {final_stats}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            import traceback
            logger.error(f"–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return False
    
    def _apply_global_settings(self, doc: Document) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            margins = self.requirements["base_formatting"]["margins_cm"]
            
            for section in doc.sections:
                section.top_margin = Cm(margins["top"])
                section.bottom_margin = Cm(margins["bottom"])
                section.left_margin = Cm(margins["left"])
                section.right_margin = Cm(margins["right"])
            
            logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –ø–æ–ª—è: {margins}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            self.stats.increment('errors')
    
    def _process_all_paragraphs(self, doc: Document) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤...")
        
        for i, paragraph in enumerate(doc.paragraphs):
            self.stats.increment('total_paragraphs')
            
            try:
                text = paragraph.text.strip()
                paragraph_type = self.classifier.classify_paragraph(text)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
                if text:
                    logger.debug(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {i+1}: —Ç–∏–ø='{paragraph_type}', —Ç–µ–∫—Å—Ç='{text[:100]}{'...' if len(text) > 100 else ''}'")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                self._apply_paragraph_formatting(paragraph, paragraph_type, i+1, text)
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ {i+1}: {e}")
                self.stats.increment('errors')
        
        final_stats = self.stats.stats
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {final_stats}")
    
    def _apply_paragraph_formatting(self, paragraph, paragraph_type: str, index: int, text: str) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É"""
        if paragraph_type == "skip":
            self.stats.increment('skipped_paragraphs')
            logger.info(f"‚è≠Ô∏è  –ü–†–û–ü–£–°–ö #{index}: {text[:60]}{'...' if len(text) > 60 else ''}")
            
        elif paragraph_type == "h1":
            self.formatter.format_h1(paragraph)
            self.stats.increment('h1_formatted')
            logger.info(f"üìù H1 #{index}: {text[:40]}...")
            
        elif paragraph_type == "h2":
            self.formatter.format_h2(paragraph)
            self.stats.increment('h2_formatted')
            logger.info(f"üìÑ H2 #{index}: {text[:40]}...")
            
        elif paragraph_type == "list":
            self.formatter.format_list(paragraph)
            self.stats.increment('lists_formatted')
            logger.debug(f"üìã –°–ü–ò–°–û–ö #{index}: {text[:40]}...")
            
        else:  # regular
            self.formatter.format_regular(paragraph)
            self.stats.increment('regular_formatted')
    
    def get_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return self.stats.get_statistics(self.classifier.get_state())

# ============================================================================
# MAIN API FUNCTION
# ============================================================================

def format_vkr_document(input_path: str, requirements: Dict[str, Any], output_path: str) -> Tuple[bool, Dict[str, Any]]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –í–ö–† —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    
    Args:
        input_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –í–ö–†
        requirements: —Å–ª–æ–≤–∞—Ä—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        output_path: –ø—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º—É —Ñ–∞–π–ª—É
        
    Returns:
        tuple: (—É—Å–ø–µ—Ö, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    """
    formatter = VKRFormatter(requirements)
    success = formatter.format_document(input_path, output_path)
    stats = formatter.get_statistics()
    
    return success, stats 