"""
–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
"""

from typing import Dict, Any
from content_detector import ContentDetector
from document_state import DocumentState, logger


class StyleBasedClassifier:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞"""

    def __init__(self, requirements: Dict[str, Any], strict_style_mode: bool = False):
        self.requirements = requirements
        self.detector = ContentDetector()
        self.state = DocumentState()
        self.strict_style_mode = strict_style_mode  # –ï—Å–ª–∏ True, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è Normal —Å—Ç–∏–ª—è

    def classify_paragraph_by_style(self, paragraph, text: str) -> str:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å—Ç–∏–ª—è

        Args:
            paragraph: –æ–±—ä–µ–∫—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –∏–∑ python-docx
            text: —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞

        Returns:
            str: "skip", "h1", "h2", "list", "regular"
        """
        if not text:
            return "skip"

        text_clean = text.strip()

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if self.detector.is_contents_header(text_clean):
            logger.info(f"üìë –ù–ê–ß–ê–õ–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø: {text_clean[:50]}...")
            self.state.start_contents_section()
            return "skip"

        # 2. –ï—Å–ª–∏ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏
        if self.state.in_contents_section:
            return self._classify_in_contents_section(text_clean)

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        if (self.detector.is_title_page_content(text_clean) or
                self.detector.is_service_content(text_clean)):
            logger.debug(f"üî¥ –°–õ–£–ñ–ï–ë–ù–´–ô –†–ê–ó–î–ï–õ: {text_clean[:50]}...")
            return "skip"

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if (not self.state.found_main_content and
                self.detector.is_main_content_start(text_clean)):
            logger.info(f"üü¢ –ù–ê–ß–ê–õ–û –û–°–ù–û–í–ù–û–ì–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø: {text_clean[:60]}...")
            self.state.start_main_content()
            return self._classify_content_paragraph_by_style(paragraph, text_clean)

        # 5. –ï—Å–ª–∏ –≤ —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        if self.state.in_title_section:
            logger.debug(f"‚ö™ –ü–†–û–ü–£–°–ö (—Ç–∏—Ç—É–ª—å–Ω–∞—è): {text_clean[:50]}...")
            return "skip"

        # 6. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        return self._classify_content_paragraph_by_style(paragraph, text_clean)

    def _classify_in_contents_section(self, text_clean: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –≤ —Ä–∞–∑–¥–µ–ª–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if self.detector.is_contents_line(text_clean):
            logger.debug(f"üìë –°–û–î–ï–†–ñ–ê–ù–ò–ï (—Å—Ç—Ä–æ–∫–∞): {text_clean[:50]}...")
            return "skip"

        # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        if self.detector.is_main_content_start(text_clean):
            logger.info(
                f"üü¢ –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ê–ù–ò–Ø, –ù–ê–ß–ê–õ–û –û–°–ù–û–í–ù–û–ì–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø: {text_clean[:60]}...")
            self.state.start_main_content()
            # –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω –æ–±—ä–µ–∫—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞, –Ω–æ —É –Ω–∞—Å –µ–≥–æ –Ω–µ—Ç –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            # –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            return self._classify_by_text_patterns(text_clean)
        else:
            # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏
            logger.debug(f"üìë –°–û–î–ï–†–ñ–ê–ù–ò–ï (–ø—Ä–æ—á–µ–µ): {text_clean[:50]}...")
            return "skip"

    def _classify_content_paragraph_by_style(self, paragraph, text_clean: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ —Å—Ç–∏–ª—é"""
        logger.debug(f"üé® –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ —Å—Ç–∏–ª—é: '{text_clean[:50]}...'")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
        style_name = self._get_paragraph_style_name(paragraph)
        logger.debug(f"   üìù –°—Ç–∏–ª—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: '{style_name}'")
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ —Å—Ç–∏–ª—é (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—Ç–∏–ª—è–º!)
        if self._is_h1_style(style_name):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ H1 –ø–æ —Å—Ç–∏–ª—é")
            return "h1"
        elif self._is_h2_style(style_name):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ H2 –ø–æ —Å—Ç–∏–ª—é")
            return "h2"
        elif self._is_list_style(style_name):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –ø–æ —Å—Ç–∏–ª—é")
            return "list"
        elif style_name == "Normal":
            if self.strict_style_mode:
                # –í —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ —Å—Ç–∏–ª—å Normal –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                logger.debug(f"   üîí –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º: —Å—Ç–∏–ª—å Normal = –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç")
                return "regular"
            else:
                # –î–ª—è —Å—Ç–∏–ª—è Normal –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                logger.debug(f"   üîÑ –°—Ç–∏–ª—å Normal: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º")
                return self._classify_by_text_patterns(text_clean)
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∏–ª–µ–π (–Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã—Ö) —Å—á–∏—Ç–∞–µ–º –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            logger.debug(f"   ‚Ü≥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å '{style_name}', —Å—á–∏—Ç–∞–µ–º –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º")
            return "regular"

    def _get_paragraph_style_name(self, paragraph) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"""
        try:
            if paragraph.style and paragraph.style.name:
                return paragraph.style.name
            else:
                return "Normal"
        except Exception as e:
            logger.debug(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏–ª—è: {e}")
            return "Normal"

    def _is_h1_style(self, style_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º 1 —É—Ä–æ–≤–Ω—è"""
        h1_styles = [
            "Heading 1",
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1", 
            "Title",
            "–ù–∞–∑–≤–∞–Ω–∏–µ",
            "Header 1",
            "H1"
        ]
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if style_name in h1_styles:
            logger.debug(f"      ‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ H1 —Å—Ç–∏–ª—è: {style_name}")
            return True
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
        style_lower = style_name.lower()
        for h1_style in h1_styles:
            if h1_style.lower() in style_lower:
                logger.debug(f"      ‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ H1 —Å—Ç–∏–ª—è: {style_name} —Å–æ–¥–µ—Ä–∂–∏—Ç {h1_style}")
                return True
        
        logger.debug(f"      ‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è H1 —Å—Ç–∏–ª–µ–º: {style_name}")
        return False

    def _is_h2_style(self, style_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º 2 —É—Ä–æ–≤–Ω—è"""
        h2_styles = [
            "Heading 2",
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2",
            "Subtitle", 
            "–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫",
            "Header 2",
            "H2",
            "Heading2",
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫2",
            "Sub Heading",
            "–ü–æ–¥—Ä–∞–∑–¥–µ–ª",
            "Section Heading"
        ]
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if style_name in h2_styles:
            logger.debug(f"      ‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ H2 —Å—Ç–∏–ª—è: {style_name}")
            return True
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
        style_lower = style_name.lower()
        for h2_style in h2_styles:
            if h2_style.lower() in style_lower:
                logger.debug(f"      ‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ H2 —Å—Ç–∏–ª—è: {style_name} —Å–æ–¥–µ—Ä–∂–∏—Ç {h2_style}")
                return True
        
        logger.debug(f"      ‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è H2 —Å—Ç–∏–ª–µ–º: {style_name}")
        return False

    def _is_list_style(self, style_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∏–ª—å —Å–ø–∏—Å–∫–æ–º"""
        list_styles = [
            "List Paragraph",
            "–°–ø–∏—Å–æ–∫",
            "Bullet",
            "Numbered",
            "–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫",
            "–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        ]
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if style_name in list_styles:
            return True
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        style_lower = style_name.lower()
        for list_style in list_styles:
            if list_style.lower() in style_lower:
                return True
        
        return False

    def _classify_by_text_patterns(self, text_clean: str) -> str:
        """Fallback: –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º"""
        logger.debug(f"   üîç Fallback: –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–∞–∫ fallback
        if self._is_h1_by_pattern(text_clean):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ H1 –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
            return "h1"
        elif self._is_h2_by_pattern(text_clean):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ H2 –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
            return "h2"
        elif self._is_list_by_pattern(text_clean):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
            return "list"
        else:
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ")
            return "regular"

    def _is_h1_by_pattern(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (fallback)"""
        import re
        patterns = self.requirements["h1_formatting"]["detection_patterns"]
        text_upper = text.upper().strip()
        
        for pattern in patterns:
            if re.match(pattern, text_upper):
                return True

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
        if len(text) < 100:
            alpha_chars = [c for c in text if c.isalpha()]
            if alpha_chars:
                upper_ratio = sum(1 for c in alpha_chars if c.isupper()) / len(alpha_chars)
                if upper_ratio > 0.7:
                    return True

        return False

    def _is_h2_by_pattern(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç H2 –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (fallback)"""
        import re
        patterns = self.requirements["h2_formatting"]["detection_patterns"]

        for pattern in patterns:
            if re.match(pattern, text.strip()):
                return True

        return False

    def _is_list_by_pattern(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (fallback)"""
        import re
        patterns = self.requirements["lists"]["bullet_lists"]["detection_patterns"]

        for pattern in patterns:
            if re.match(pattern, text):
                return True

        return False

    def get_state(self) -> DocumentState:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        return self.state 