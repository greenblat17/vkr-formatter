"""
–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
"""

from typing import Dict, Any
from content_detector import ContentDetector
from document_state import DocumentState, logger


class StyleBasedClassifier:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞"""

    def __init__(self, requirements: Dict[str, Any], strict_style_mode: bool = False):
        self.requirements = requirements
        self.detector = ContentDetector()
        self.state = DocumentState()
        self.strict_style_mode = strict_style_mode  # –ï—Å–ª–∏ True, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è Normal —Å—Ç–∏–ª—è

    def classify_paragraph_by_style(self, paragraph, text: str) -> str:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å—Ç–∏–ª—è

        Args:
            paragraph: –æ–±—ä–µ–∫—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –∏–∑ python-docx
            text: —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞

        Returns:
            str: "skip", "h1", "h2", "list", "regular"
        """
        if not text:
            return "skip"

        text_clean = text.strip()

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if self.detector.is_contents_header(text_clean):
            logger.info(f"üìë –ù–ê–ß–ê–õ–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø: {text_clean[:50]}...")
            self.state.start_contents_section()
            return "skip"

        # 2. –ï—Å–ª–∏ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏
        if self.state.in_contents_section:
            return self._classify_in_contents_section(text_clean)

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        if (self.detector.is_title_page_content(text_clean) or
                self.detector.is_service_content(text_clean)):
            logger.debug(f"üî¥ –°–õ–£–ñ–ï–ë–ù–´–ô –†–ê–ó–î–ï–õ: {text_clean[:50]}...")
            return "skip"

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if (not self.state.found_main_content and
                self.detector.is_main_content_start(text_clean)):
            logger.info(f"üü¢ –ù–ê–ß–ê–õ–û –û–°–ù–û–í–ù–û–ì–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø: {text_clean[:60]}...")
            self.state.start_main_content()
            return self._classify_content_paragraph_by_style(paragraph, text_clean)

        # 5. –ï—Å–ª–∏ –≤ —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        if self.state.in_title_section:
            logger.debug(f"‚ö™ –ü–†–û–ü–£–°–ö (—Ç–∏—Ç—É–ª—å–Ω–∞—è): {text_clean[:50]}...")
            return "skip"

        # 6. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        return self._classify_content_paragraph_by_style(paragraph, text_clean)

    def _classify_in_contents_section(self, text_clean: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –≤ —Ä–∞–∑–¥–µ–ª–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if self.detector.is_contents_line(text_clean):
            logger.debug(f"üìë –°–û–î–ï–†–ñ–ê–ù–ò–ï (—Å—Ç—Ä–æ–∫–∞): {text_clean[:50]}...")
            return "skip"

        # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        if self.detector.is_main_content_start(text_clean):
            logger.info(
                f"üü¢ –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ê–ù–ò–Ø, –ù–ê–ß–ê–õ–û –û–°–ù–û–í–ù–û–ì–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø: {text_clean[:60]}...")
            self.state.start_main_content()
            # –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω –æ–±—ä–µ–∫—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞, –Ω–æ —É –Ω–∞—Å –µ–≥–æ –Ω–µ—Ç –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            # –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            return self._classify_by_text_patterns(text_clean)
        else:
            # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏
            logger.debug(f"üìë –°–û–î–ï–†–ñ–ê–ù–ò–ï (–ø—Ä–æ—á–µ–µ): {text_clean[:50]}...")
            return "skip"

    def _classify_content_paragraph_by_style(self, paragraph, text_clean: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ —Å—Ç–∏–ª—é"""
        logger.debug(f"üé® –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ —Å—Ç–∏–ª—é: '{text_clean[:50]}...'")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
        style_name = self._get_paragraph_style_name(paragraph)
        logger.debug(f"   üìù –°—Ç–∏–ª—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: '{style_name}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏)
        if self._contains_image(paragraph):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∏—Å—É–Ω–∫–∞")
            return "figure_image"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ —Ä–∏—Å—É–Ω–∫–∏
        content_type = self._classify_content_elements(text_clean)
        if content_type != "regular":
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}")
            return content_type
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ —Å—Ç–∏–ª—é (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—Ç–∏–ª—è–º!)
        if self._is_h1_style(style_name):
            # –î–ª—è H1 —Å—Ç–∏–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–æ–º
            # –ù–û —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–ª–∞–≤–∞
            if self._is_numbered_chapter(text_clean):
                logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ H1 (–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–ª–∞–≤–∞)")
                return "h1"
            elif self._is_special_h1_section(text_clean):
                logger.debug(f"   ‚Ü≥ H1 —Å—Ç–∏–ª—å, –Ω–æ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª")
                return self._classify_special_sections(text_clean)
            else:
                logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ H1 –ø–æ —Å—Ç–∏–ª—é")
                return "h1"
        elif self._is_h2_style(style_name):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ H2 –ø–æ —Å—Ç–∏–ª—é")
            return "h2"
        elif self._is_h3_style(style_name):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ H3 –ø–æ —Å—Ç–∏–ª—é")
            return "h3"
        elif self._is_h4_style(style_name):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ H4 –ø–æ —Å—Ç–∏–ª—é")
            return "h4"
        elif self._is_list_style(style_name):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –ø–æ —Å—Ç–∏–ª—é")
            return "list"
        elif style_name == "Normal":
            if self.strict_style_mode:
                # –í —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ —Å—Ç–∏–ª—å Normal –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                logger.debug(f"   üîí –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º: —Å—Ç–∏–ª—å Normal = –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç")
                return "regular"
            else:
                # –î–ª—è —Å—Ç–∏–ª—è Normal –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                logger.debug(f"   üîÑ –°—Ç–∏–ª—å Normal: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º")
                return self._classify_by_text_patterns(text_clean)
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∏–ª–µ–π (–Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã—Ö) –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
            special_type = self._classify_special_sections(text_clean)
            if special_type != "regular":
                logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª: {special_type}")
                return special_type
            else:
                logger.debug(f"   ‚Ü≥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å '{style_name}', —Å—á–∏—Ç–∞–µ–º –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º")
                return "regular"

    def _get_paragraph_style_name(self, paragraph) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"""
        try:
            if paragraph.style and paragraph.style.name:
                return paragraph.style.name
            else:
                return "Normal"
        except Exception as e:
            logger.debug(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏–ª—è: {e}")
            return "Normal"

    def _is_h1_style(self, style_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º 1 —É—Ä–æ–≤–Ω—è"""
        h1_styles = [
            "Heading 1",
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1", 
            "Title",
            "–ù–∞–∑–≤–∞–Ω–∏–µ",
            "Header 1",
            "H1"
        ]
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if style_name in h1_styles:
            logger.debug(f"      ‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ H1 —Å—Ç–∏–ª—è: {style_name}")
            return True
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
        style_lower = style_name.lower()
        for h1_style in h1_styles:
            if h1_style.lower() in style_lower:
                logger.debug(f"      ‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ H1 —Å—Ç–∏–ª—è: {style_name} —Å–æ–¥–µ—Ä–∂–∏—Ç {h1_style}")
                return True
        
        logger.debug(f"      ‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è H1 —Å—Ç–∏–ª–µ–º: {style_name}")
        return False

    def _is_h2_style(self, style_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º 2 —É—Ä–æ–≤–Ω—è"""
        h2_styles = [
            "Heading 2",
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2",
            "Subtitle", 
            "–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫",
            "Header 2",
            "H2",
            "Heading2",
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫2",
            "Sub Heading",
            "–ü–æ–¥—Ä–∞–∑–¥–µ–ª",
            "Section Heading"
        ]
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if style_name in h2_styles:
            logger.debug(f"      ‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ H2 —Å—Ç–∏–ª—è: {style_name}")
            return True
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
        style_lower = style_name.lower()
        for h2_style in h2_styles:
            if h2_style.lower() in style_lower:
                logger.debug(f"      ‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ H2 —Å—Ç–∏–ª—è: {style_name} —Å–æ–¥–µ—Ä–∂–∏—Ç {h2_style}")
                return True
        
        logger.debug(f"      ‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è H2 —Å—Ç–∏–ª–µ–º: {style_name}")
        return False

    def _is_h3_style(self, style_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º 3 —É—Ä–æ–≤–Ω—è"""
        h3_styles = [
            "Heading 3",
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3",
            "Heading3",
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫3",
            "Header 3",
            "H3",
            "Sub Sub Heading",
            "–ü–æ–¥–ø–æ–¥—Ä–∞–∑–¥–µ–ª",
            "Subsection Heading"
        ]
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if style_name in h3_styles:
            logger.debug(f"      ‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ H3 —Å—Ç–∏–ª—è: {style_name}")
            return True
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
        style_lower = style_name.lower()
        for h3_style in h3_styles:
            if h3_style.lower() in style_lower:
                logger.debug(f"      ‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ H3 —Å—Ç–∏–ª—è: {style_name} —Å–æ–¥–µ—Ä–∂–∏—Ç {h3_style}")
                return True
        
        logger.debug(f"      ‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è H3 —Å—Ç–∏–ª–µ–º: {style_name}")
        return False

    def _is_h4_style(self, style_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º 4 —É—Ä–æ–≤–Ω—è"""
        h4_styles = [
            "Heading 4",
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ 4",
            "Heading4",
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫4",
            "Header 4",
            "H4",
            "Paragraph Heading",
            "–ü—É–Ω–∫—Ç",
            "Point Heading"
        ]
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if style_name in h4_styles:
            logger.debug(f"      ‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ H4 —Å—Ç–∏–ª—è: {style_name}")
            return True
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
        style_lower = style_name.lower()
        for h4_style in h4_styles:
            if h4_style.lower() in style_lower:
                logger.debug(f"      ‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ H4 —Å—Ç–∏–ª—è: {style_name} —Å–æ–¥–µ—Ä–∂–∏—Ç {h4_style}")
                return True
        
        logger.debug(f"      ‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è H4 —Å—Ç–∏–ª–µ–º: {style_name}")
        return False

    def _is_list_style(self, style_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∏–ª—å —Å–ø–∏—Å–∫–æ–º"""
        list_styles = [
            "List Paragraph",
            "–°–ø–∏—Å–æ–∫",
            "Bullet",
            "Numbered",
            "–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫",
            "–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        ]
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if style_name in list_styles:
            return True
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        style_lower = style_name.lower()
        for list_style in list_styles:
            if list_style.lower() in style_lower:
                return True
        
        return False

    def _classify_by_text_patterns(self, text_clean: str) -> str:
        """Fallback: –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º"""
        logger.debug(f"   üîç Fallback: –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–∞–∫ fallback
        if self._is_h1_by_pattern(text_clean):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ H1 –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
            return "h1"
        elif self._is_h2_by_pattern(text_clean):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ H2 –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
            return "h2"
        elif self._is_h3_by_pattern(text_clean):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ H3 –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
            return "h3"
        elif self._is_h4_by_pattern(text_clean):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ H4 –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
            return "h4"
        elif self._is_list_by_pattern(text_clean):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
            return "list"
        else:
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ")
            return "regular"

    def _is_h1_by_pattern(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (fallback)"""
        import re
        patterns = self.requirements["h1_formatting"]["detection_patterns"]
        text_upper = text.upper().strip()
        
        for pattern in patterns:
            if re.match(pattern, text_upper):
                return True

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
        if len(text) < 100:
            alpha_chars = [c for c in text if c.isalpha()]
            if alpha_chars:
                upper_ratio = sum(1 for c in alpha_chars if c.isupper()) / len(alpha_chars)
                if upper_ratio > 0.7:
                    return True

        return False

    def _is_h2_by_pattern(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç H2 –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (fallback)"""
        import re
        patterns = self.requirements["h2_formatting"]["detection_patterns"]

        for pattern in patterns:
            if re.match(pattern, text.strip()):
                return True

        return False

    def _is_h3_by_pattern(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç H3 –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (fallback)"""
        import re
        patterns = self.requirements["h3_formatting"]["detection_patterns"]

        for pattern in patterns:
            if re.match(pattern, text.strip()):
                return True

        return False

    def _is_h4_by_pattern(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç H4 –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (fallback)"""
        import re
        patterns = self.requirements["h4_formatting"]["detection_patterns"]

        for pattern in patterns:
            if re.match(pattern, text.strip()):
                return True

        return False

    def _is_list_by_pattern(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (fallback)"""
        import re
        patterns = self.requirements["lists"]["bullet_lists"]["detection_patterns"]

        for pattern in patterns:
            if re.match(pattern, text):
                return True

        return False

    def _classify_special_sections(self, text_clean: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã"""
        text_upper = text_clean.upper()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã
        references_keywords = self.requirements["special_sections"]["references"]["keywords"]
        for keyword in references_keywords:
            if keyword.upper() in text_upper:
                logger.debug(f"   üìö –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã: {keyword}")
                self.state.start_references_section()
                return "references_header"
        
        # –ï—Å–ª–∏ –º—ã –≤ —Ä–∞–∑–¥–µ–ª–µ —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, —Ä–∞–∑–ª–∏—á–∞–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
        if self.state.in_references_section:
            if text_clean.strip():  # –õ—é–±–∞—è –Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã
                if self._is_bibliography_entry_start(text_clean):
                    return "bibliography_entry"
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ –±—ã—Ç—å –Ω–∞—á–∞–ª–æ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –Ω–æ–º–µ—Ä–∞
                    if self._looks_like_bibliography_start(text_clean):
                        return "bibliography_entry"
                    else:
                        return "bibliography_continuation"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        special_sections = self.requirements["special_sections"]
        for section_name, section_config in special_sections.items():
            for keyword in section_config["keywords"]:
                if keyword.upper() in text_upper:
                    return f"special_{section_name}"
        
        return "regular"

    def _classify_content_elements(self, text_clean: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–∞–±–ª–∏—Ü—ã, —Ä–∏—Å—É–Ω–∫–∏, —Ñ–æ—Ä–º—É–ª—ã)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        table_patterns = self.requirements["tables"]["detection_patterns"]
        for pattern in table_patterns:
            import re
            if re.search(pattern, text_clean, re.IGNORECASE):
                return "table_caption"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∏ —Ä–∏—Å—É–Ω–∫–æ–≤
        figure_patterns = self.requirements["figures"]["detection_patterns"]
        for pattern in figure_patterns:
            import re
            if re.search(pattern, text_clean, re.IGNORECASE):
                return "figure_caption"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É–ª—ã –∏ –∏—Ö —ç–ª–µ–º–µ–Ω—Ç—ã
        formula_patterns = self.requirements["formulas"]["detection_patterns"]
        import re
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ä–º—É–ª (–≤ —Å–∫–æ–±–∫–∞—Ö)
        numbering_patterns = [r"\(\d+\.\d+\)", r"\(\d+\)"]
        for pattern in numbering_patterns:
            if re.search(pattern, text_clean):
                return "formula_numbering"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏—è –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
        explanation_patterns = [
            r"^–≥–¥–µ\s+[–∞-—è—ë–ê-–Ø–Å]",  # "–≥–¥–µ x ‚Äì –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è"
            r"^[–∞-—è—ë–ê-–Ø–Å]\s*[-‚Äì‚Äî]\s*",  # "x ‚Äì –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è"
            r"^–≤\s+–∫–æ—Ç–æ—Ä–æ–π\s+",  # "–≤ –∫–æ—Ç–æ—Ä–æ–π x ‚Äì –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è"
            r"^–∑–¥–µ—Å—å\s+[–∞-—è—ë–ê-–Ø–Å]"  # "–∑–¥–µ—Å—å x ‚Äì –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è"
        ]
        for pattern in explanation_patterns:
            if re.search(pattern, text_clean, re.IGNORECASE):
                return "formula_explanation"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ–æ—Ä–º—É–ª
        formula_title_patterns = [r"^–§–æ—Ä–º—É–ª–∞\s+\d+", r"^Formula\s+\d+"]
        for pattern in formula_title_patterns:
            if re.search(pattern, text_clean, re.IGNORECASE):
                return "formula"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
        math_indicators = [
            r"[=+\-*/^]",  # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
            r"[‚àë‚àè‚à´‚àÇ‚àÜ‚àá]",  # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            r"[Œ±Œ≤Œ≥Œ¥ŒµŒ∂Œ∑Œ∏ŒπŒ∫ŒªŒºŒΩŒæŒøœÄœÅœÉœÑœÖœÜœáœàœâ]",  # –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã
            r"[ŒëŒíŒìŒîŒïŒñŒóŒòŒôŒöŒõŒúŒùŒûŒüŒ†Œ°Œ£Œ§Œ•Œ¶ŒßŒ®Œ©]",  # –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã –∑–∞–≥–ª–∞–≤–Ω—ã–µ
            r"\b(sin|cos|tan|log|ln|exp|sqrt|lim|max|min)\b",  # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            r"[‚ÇÄ‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çá‚Çà‚Çâ]",  # –ù–∏–∂–Ω–∏–µ –∏–Ω–¥–µ–∫—Å—ã
            r"[‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ]"   # –í–µ—Ä—Ö–Ω–∏–µ –∏–Ω–¥–µ–∫—Å—ã
        ]
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ —Ñ–æ—Ä–º—É–ª–æ–π
        for pattern in math_indicators:
            if re.search(pattern, text_clean):
                return "formula"
        
        return "regular"

    def _is_bibliography_entry_start(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –ù–ê–ß–ê–õ–û–ú –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏ (—Å –Ω–æ–º–µ—Ä–æ–º)"""
        import re
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ —Å –Ω–æ–º–µ—Ä–∞ - —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        # –ü–∞—Ç—Ç–µ—Ä–Ω 1: –Ω–æ–º–µ—Ä —Å –ø—Ä–æ–±–µ–ª–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º ("1. –ê–≤—Ç–æ—Ä...")
        if re.match(r'^\s*\d+\.\s+', text):
            return True
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω 2: —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä ("1.", "2.", "3.")
        if re.match(r'^\s*\d+\.\s*$', text):
            return True
        
        return False

    def _looks_like_bibliography_start(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏ (–±–µ–∑ –Ω–æ–º–µ—Ä–∞)"""
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π
        start_patterns = [
            r'^[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å]\.',  # "–ò–≤–∞–Ω–æ–≤ –ò."
            r'^[A-Z][a-z]+\s+[A-Z]\.',       # "Smith J."
            r'^[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å]\.\s*[–ê-–Ø–Å]\.',  # "–ò–≤–∞–Ω–æ–≤ –ò.–ò."
            r'^[A-Z][a-z]+\s+[A-Z]\.\s*[A-Z]\.',       # "Smith J.A."
            r'^[–ê-–Ø–Å][–∞-—è—ë\s]+\s*[:/]',     # "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:"
            r'^[A-Z][a-zA-Z\s]+\s*[:/]',     # "Book Title:"
            r'^–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è\s+',             # "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Docker"
            r'^–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π\s+—Å–∞–π—Ç',          # "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç"
            r'^–°–∞–π—Ç\s+',                     # "–°–∞–π—Ç –≤–∞–∫–∞–Ω—Å–∏–π"
        ]
        
        for pattern in start_patterns:
            if re.match(pattern, text):
                return True
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫—É (–≤–æ–∑–º–æ–∂–Ω–æ –∞–≤—Ç–æ—Ä)
        if re.match(r'^[–ê-–Ø–ÅA-Z]', text) and '.' in text[:50]:
            return True
        
        return False

    def _is_bibliography_entry(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å—å—é (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self._is_bibliography_entry_start(text)

    def _is_special_h1_section(self, text_clean: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–æ–º"""
        text_upper = text_clean.upper()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        special_sections = self.requirements["special_sections"]
        for section_name, section_config in special_sections.items():
            for keyword in section_config["keywords"]:
                if keyword.upper() in text_upper:
                    logger.debug(f"      üéØ –ù–∞–π–¥–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª '{section_name}' –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}'")
                    return True
        
        return False

    def _contains_image(self, paragraph) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            text = paragraph.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            image_placeholders = [
                '[–ó–î–ï–°–¨ –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï]',
                '[–í–¢–û–†–û–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï]',
                '[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï]',
                '[IMAGE]',
                '[–†–ò–°–£–ù–û–ö]',
                '[FIGURE]',
                '[–†–ï–ê–õ–¨–ù–û–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –ê–†–•–ò–¢–ï–ö–¢–£–†–´]',
                '[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –í –†–ê–ó–î–ï–õ–ï 2]',
                '[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï 1]',
                '[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï 2]',
                '[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï 3]',
                '[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –í –ü–ï–†–í–û–ô –ì–õ–ê–í–ï]',
                '[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –í–û –í–¢–û–†–û–ô –ì–õ–ê–í–ï]'
            ]
            
            for placeholder in image_placeholders:
                if placeholder in text.upper():
                    logger.debug(f"      üñºÔ∏è –ù–∞–π–¥–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {text}")
                    return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
            for run in paragraph.runs:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ run
                if hasattr(run, '_element') and run._element is not None:
                    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ XML
                    for child in run._element:
                        tag_name = child.tag.split('}')[-1] if '}' in child.tag else child.tag
                        if tag_name in ['drawing', 'pict', 'object']:
                            logger.debug(f"      üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ (—Ç–µ–≥: {tag_name})")
                            return True
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                        for subchild in child:
                            subtag_name = subchild.tag.split('}')[-1] if '}' in subchild.tag else subchild.tag
                            if subtag_name in ['inline', 'anchor', 'pict', 'blip', 'graphic']:
                                logger.debug(f"      üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ç–µ–≥: {subtag_name})")
                                return True
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ –≥–ª—É–±–∂–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
                            for subsubchild in subchild:
                                subsubtag_name = subsubchild.tag.split('}')[-1] if '}' in subsubchild.tag else subsubchild.tag
                                if subsubtag_name in ['blip', 'graphic', 'pic']:
                                    logger.debug(f"      üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –≥–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ç–µ–≥: {subsubtag_name})")
                                    return True
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π,
            # –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç runs, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if len(text) == 0 and len(paragraph.runs) > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ runs —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–∞
                for run in paragraph.runs:
                    if hasattr(run, '_element') and run._element is not None:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        if len(run._element) > 0 and not run.text.strip():
                            logger.debug(f"      üñºÔ∏è –ü—É—Å—Ç–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                            return True
                
            return False
            
        except Exception as e:
            logger.debug(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return False

    def _is_numbered_chapter(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–ª–∞–≤–æ–π"""
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤
        numbered_patterns = [
            r'^\d+\.\s+[–ê-–Ø–Å]',  # "1. –í–í–ï–î–ï–ù–ò–ï", "2. –ê–†–•–ò–¢–ï–ö–¢–£–†–ê"
            r'^–ì–õ–ê–í–ê\s+\d+',      # "–ì–õ–ê–í–ê 1"
            r'^\d+\s+[–ê-–Ø–Å]'     # "1 –í–í–ï–î–ï–ù–ò–ï"
        ]
        
        text_upper = text.upper().strip()
        for pattern in numbered_patterns:
            if re.match(pattern, text_upper):
                return True
        
        return False

    def get_state(self) -> DocumentState:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        return self.state 