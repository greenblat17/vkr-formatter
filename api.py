from fastapi import FastAPI, UploadFile, File, HTTPException, BackgroundTasks
from fastapi.responses import FileResponse
import tempfile
import shutil
import logging
from pathlib import Path
import json
import os
from datetime import datetime
from typing import Optional
from logger_config import api_logger as logger

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from vkr_requirements_stub import analyze_requirements_stub
from vkr_formatter import format_vkr_document

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="VKR Formatter API (Clean Version)",
    description="–ü—Ä–æ—Å—Ç–æ–µ API –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –í–ö–† —Å–æ–≥–ª–∞—Å–Ω–æ –ì–û–°–¢",
    version="2.0.0"
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
stats = {
    "total_processed": 0,
    "successful": 0,
    "failed": 0,
    "last_processed": None
}

def cleanup_temp_file(file_path: str):
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        if os.path.exists(file_path):
            os.unlink(file_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")

@app.get("/")
async def root():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ"""
    return {
        "service": "VKR Formatter API (Clean Version)",
        "version": "2.0.0",
        "description": "–ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –í–ö–† —Å –∑–∞–≥–ª—É—à–∫–æ–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π",
        "endpoints": {
            "/format": "POST - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –í–ö–†",
            "/requirements": "GET - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            "/stats": "GET - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        }
    }

@app.get("/requirements")
async def get_default_requirements():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    try:
        requirements = analyze_requirements_stub("dummy_path")
        return {
            "status": "success",
            "message": "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ì–û–°–¢",
            "requirements": requirements
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {str(e)}")

@app.get("/stats")
async def get_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    return stats

@app.post("/format")
async def format_vkr(
    background_tasks: BackgroundTasks,
    vkr: UploadFile = File(..., description="–§–∞–π–ª –í–ö–† –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx"),
    requirements: Optional[UploadFile] = File(default=None, description="–§–∞–π–ª —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞)")
):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –í–ö–† —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    
    - –ï—Å–ª–∏ —Ñ–∞–π–ª —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ì–û–°–¢
    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç H1, H2, —Å–ø–∏—Å–∫–∏, –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    - –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —à–∞–±–ª–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats["total_processed"] += 1
    stats["last_processed"] = datetime.now().isoformat()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not vkr.filename.endswith(('.docx', '.doc')):
        raise HTTPException(
            status_code=400, 
            detail="–§–∞–π–ª –í–ö–† –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx –∏–ª–∏ .doc"
        )
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    with tempfile.TemporaryDirectory() as tmpdir:
        tmpdir_path = Path(tmpdir)
        
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        vkr_path = tmpdir_path / "input_vkr.docx"
        req_path = tmpdir_path / "requirements.docx" if requirements else None
        output_path = tmpdir_path / "formatted_vkr.docx"
        
        try:
            logger.info(f"üìÅ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –í–ö–†: {vkr.filename}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –í–ö–†
            with open(vkr_path, "wb") as f:
                shutil.copyfileobj(vkr.file, f)
            logger.info(f"üíæ –í–ö–† —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {vkr_path}")
            
            logger.info("üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            vkr_requirements = analyze_requirements_stub("default")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            logger.info("üöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            logger.info(f"üìÑ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {vkr_path} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {vkr_path.exists()})")
            logger.info(f"üìÑ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_path}")
            
            success, format_stats = format_vkr_document(
                str(vkr_path), 
                vkr_requirements, 
                str(output_path)
            )
            
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: success={success}, stats={format_stats}")
            
            if not success:
                stats["failed"] += 1
                raise HTTPException(
                    status_code=500, 
                    detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {output_path}")
            logger.info(f"‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {output_path.exists()}")
            
            if not output_path.exists():
                stats["failed"] += 1
                # –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                logger.error(f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {list(tmpdir_path.iterdir())}")
                raise HTTPException(
                    status_code=500, 
                    detail=f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. –û–∂–∏–¥–∞–ª—Å—è: {output_path}"
                )
            
            # –í–ê–ñ–ù–û: –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            final_temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".docx")
            shutil.copy2(output_path, final_temp_file.name)
            final_temp_file.close()
            
            stats["successful"] += 1
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            original_name = Path(vkr.filename).stem
            output_filename = f"{original_name}_formatted.docx"
            
            logger.info(f"üéâ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {output_filename}")
            logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {format_stats}")
            
        except HTTPException:
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –æ—à–∏–±–∫–∏
            raise
            
        except Exception as e:
            stats["failed"] += 1
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            raise HTTPException(
                status_code=500,
                detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
            )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª (—É–∂–µ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ with)
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    background_tasks.add_task(cleanup_temp_file, final_temp_file.name)
    
    return FileResponse(
        path=final_temp_file.name,
        filename=output_filename,
        media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        headers={
            "X-Format-Stats": json.dumps(format_stats),
            "X-Requirements-Source": "file" if requirements else "default",
            "X-Version": "2.0.0"
        }
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(exc)}")
    return {
        "error": "Internal server error",
        "detail": str(exc)
    }

