import re
from typing import Dict, Any
from content_detector import ContentDetector
from document_state import DocumentState, logger


class ParagraphClassifier:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø—ã –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤"""

    def __init__(self, requirements: Dict[str, Any]):
        self.requirements = requirements
        self.detector = ContentDetector()
        self.state = DocumentState()

    def classify_paragraph(self, text: str) -> str:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ

        Returns:
            str: "skip", "h1", "h2", "list", "regular"
        """
        if not text:
            return "skip"

        text_clean = text.strip()

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if self.detector.is_contents_header(text_clean):
            logger.info(f"üìë –ù–ê–ß–ê–õ–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø: {text_clean[:50]}...")
            self.state.start_contents_section()
            return "skip"

        # 2. –ï—Å–ª–∏ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏
        if self.state.in_contents_section:
            return self._classify_in_contents_section(text_clean)

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        if (self.detector.is_title_page_content(text_clean) or
                self.detector.is_service_content(text_clean)):
            logger.debug(f"üî¥ –°–õ–£–ñ–ï–ë–ù–´–ô –†–ê–ó–î–ï–õ: {text_clean[:50]}...")
            return "skip"

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if (not self.state.found_main_content and
                self.detector.is_main_content_start(text_clean)):
            logger.info(f"üü¢ –ù–ê–ß–ê–õ–û –û–°–ù–û–í–ù–û–ì–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø: {text_clean[:60]}...")
            self.state.start_main_content()
            return self._classify_content_paragraph(text_clean)

        # 5. –ï—Å–ª–∏ –≤ —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        if self.state.in_title_section:
            logger.debug(f"‚ö™ –ü–†–û–ü–£–°–ö (—Ç–∏—Ç—É–ª—å–Ω–∞—è): {text_clean[:50]}...")
            return "skip"

        # 6. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        return self._classify_content_paragraph(text_clean)

    def _classify_in_contents_section(self, text_clean: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –≤ —Ä–∞–∑–¥–µ–ª–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if self.detector.is_contents_line(text_clean):
            logger.debug(f"üìë –°–û–î–ï–†–ñ–ê–ù–ò–ï (—Å—Ç—Ä–æ–∫–∞): {text_clean[:50]}...")
            return "skip"

        # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        if self.detector.is_main_content_start(text_clean):
            logger.info(
                f"üü¢ –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ê–ù–ò–Ø, –ù–ê–ß–ê–õ–û –û–°–ù–û–í–ù–û–ì–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø: {text_clean[:60]}...")
            self.state.start_main_content()
            return self._classify_content_paragraph(text_clean)
        else:
            # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏
            logger.debug(f"üìë –°–û–î–ï–†–ñ–ê–ù–ò–ï (–ø—Ä–æ—á–µ–µ): {text_clean[:50]}...")
            return "skip"

    def _classify_content_paragraph(self, text_clean: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
        logger.debug(f"üîç –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: '{text_clean[:50]}...'")
        
        if self._is_h1_paragraph(text_clean):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ H1")
            return "h1"
        elif self._is_h2_paragraph(text_clean):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ H2")
            return "h2"
        elif self._is_list_paragraph(text_clean):
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Å–ø–∏—Å–æ–∫")
            return "list"
        else:
            logger.debug(f"   ‚Ü≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ")
            return "regular"

    def _is_h1_paragraph(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        patterns = self.requirements["h1_formatting"]["detection_patterns"]
        text_upper = text.upper().strip()
        
        logger.debug(f"      üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º H1: '{text_upper}'")

        for i, pattern in enumerate(patterns):
            if re.match(pattern, text_upper):
                logger.debug(f"         ‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º {i+1}: {pattern}")
                return True

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç —Å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏
        if len(text) < 100:
            alpha_chars = [c for c in text if c.isalpha()]
            if alpha_chars:
                upper_ratio = sum(
                    1 for c in alpha_chars if c.isupper()) / len(alpha_chars)
                if upper_ratio > 0.7:
                    logger.debug(f"         ‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–µ (–∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã: {upper_ratio:.2f})")
                    return True

        logger.debug(f"         ‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è H1")
        return False

    def _is_h2_paragraph(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç H2 –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        patterns = self.requirements["h2_formatting"]["detection_patterns"]

        for pattern in patterns:
            if re.match(pattern, text.strip()):
                return True

        return False

    def _is_list_paragraph(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞"""
        patterns = self.requirements["lists"]["bullet_lists"]["detection_patterns"]

        for pattern in patterns:
            if re.match(pattern, text):
                return True

        return False

    def get_state(self) -> DocumentState:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        return self.state
