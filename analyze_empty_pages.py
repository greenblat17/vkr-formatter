#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä—ã–≤–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
"""

from docx import Document
from docx.enum.text import WD_BREAK
import tempfile
import os

from vkr_formatter import format_vkr_document
from requirements_stub import analyze_requirements_stub


def create_test_document():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
    doc = Document()
    
    # –¢–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    doc.add_paragraph("–ú–ò–ù–ò–°–¢–ï–†–°–¢–í–û –û–ë–†–ê–ó–û–í–ê–ù–ò–Ø –ò –ù–ê–£–ö–ò –†–û–°–°–ò–ô–°–ö–û–ô –§–ï–î–ï–†–ê–¶–ò–ò")
    doc.add_paragraph("–í–´–ü–£–°–ö–ù–ê–Ø –ö–í–ê–õ–ò–§–ò–ö–ê–¶–ò–û–ù–ù–ê–Ø –†–ê–ë–û–¢–ê")
    doc.add_paragraph("–¢–µ–º–∞: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
    
    # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    doc.add_page_break()
    doc.add_paragraph("–°–û–î–ï–†–ñ–ê–ù–ò–ï")
    doc.add_paragraph("1. –í–≤–µ–¥–µ–Ω–∏–µ    5")
    doc.add_paragraph("2. –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã    10")
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    doc.add_page_break()
    
    # H1 –∑–∞–≥–æ–ª–æ–≤–∫–∏
    h1_1 = doc.add_paragraph("1. –í–í–ï–î–ï–ù–ò–ï")
    h1_1.style = doc.styles['Heading 1']
    doc.add_paragraph("–¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω–∏—è.")
    
    h1_2 = doc.add_paragraph("2. –ü–†–û–ï–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
    h1_2.style = doc.styles['Heading 1']
    doc.add_paragraph("–¢–µ–∫—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏.")
    
    h1_3 = doc.add_paragraph("3. –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
    h1_3.style = doc.styles['Heading 1']
    doc.add_paragraph("–¢–µ–∫—Å—Ç –∑–∞–∫–ª—é—á–µ–Ω–∏—è.")
    
    return doc


def analyze_document_structure(doc_path, title="–ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–û–ö–£–ú–ï–ù–¢–ê"):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    doc = Document(doc_path)
    
    print(f"\nüìä {title}")
    print("=" * 70)
    print(f"   –í—Å–µ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {len(doc.paragraphs)}")
    
    print(f"\n{'‚Ññ':<3} {'–¢–µ–∫—Å—Ç':<45} {'–°—Ç–∏–ª—å':<15} {'–†–∞–∑—Ä—ã–≤':<8} {'–ü—É—Å—Ç–æ–π?':<8}")
    print("-" * 80)
    
    empty_pages_detected = []
    current_page_content = []
    page_number = 1
    
    for i, paragraph in enumerate(doc.paragraphs):
        text = paragraph.text.strip()
        style_name = paragraph.style.name if paragraph.style else "None"
        has_page_break = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if paragraph.runs:
            for run in paragraph.runs:
                for element in run._element:
                    if 'br' in element.tag:
                        break_type = element.get('{http://schemas.openxmlformats.org/wordprocessingml/2006/main}type')
                        if break_type == 'page':
                            has_page_break = True
                            break
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if has_page_break:
            if not any(content.strip() for content in current_page_content):
                empty_pages_detected.append(page_number)
            current_page_content = []
            page_number += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
        current_page_content.append(text)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—É—Å—Ç–æ–π –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ
        is_empty = not text
        
        break_indicator = "‚úÖ" if has_page_break else "‚ùå"
        empty_indicator = "‚ö†Ô∏è" if is_empty else "‚úÖ"
        
        print(f"{i+1:2d}. {text[:45]:<45} {style_name:<15} {break_indicator:<8} {empty_indicator:<8}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if not any(content.strip() for content in current_page_content):
        empty_pages_detected.append(page_number)
    
    if empty_pages_detected:
        print(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û –ü–£–°–¢–´–ï –°–¢–†–ê–ù–ò–¶–´: {empty_pages_detected}")
    else:
        print(f"\n‚úÖ –ü–£–°–¢–´–• –°–¢–†–ê–ù–ò–¶ –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û")
    
    return empty_pages_detected


def test_empty_pages_issue():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏"""
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –ü–£–°–¢–´–ú–ò –°–¢–†–ê–ù–ò–¶–ê–ú–ò")
    print("=" * 70)
    
    with tempfile.TemporaryDirectory() as tmpdir:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        print("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç...")
        demo_doc = create_test_document()
        input_path = os.path.join(tmpdir, "empty_pages_test_input.docx")
        demo_doc.save(input_path)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        analyze_document_structure(input_path, "–ò–°–•–û–î–ù–´–ô –î–û–ö–£–ú–ï–ù–¢")
        
        requirements = analyze_requirements_stub("test")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        print("\nüîÑ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...")
        output_path = os.path.join(tmpdir, "empty_pages_test_output.docx")
        success, stats = format_vkr_document(
            input_path, requirements, output_path, 
            use_style_based=True, strict_style_mode=True
        )
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            import shutil
            shutil.copy2(output_path, "empty_pages_analysis_result.docx")
            print(f"   üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: empty_pages_analysis_result.docx")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            empty_pages = analyze_document_structure(output_path, "–û–¢–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–´–ô –î–û–ö–£–ú–ï–ù–¢")
            
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
            print(f"   H1 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('h1_formatted', 0)}")
            print(f"   –ü—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {len(empty_pages)}")
            
            if empty_pages:
                print(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã!")
                print(f"   –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü: {empty_pages}")
                print(f"\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
                print(f"   1. –†–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ")
                print(f"   2. –†–∞–∑—Ä—ã–≤ —Å–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º")
                print(f"   3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤")
                return False
            else:
                print(f"\n‚úÖ –û–¢–õ–ò–ß–ù–û: –ü—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
                return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False


def analyze_page_break_placement():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–∞–∑—Ä—ã–≤–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü"""
    print("\nüîç –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –†–ê–ó–†–´–í–û–í –°–¢–†–ê–ù–ò–¶")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    doc = Document()
    
    # –¢–µ—Å—Ç 1: –†–∞–∑—Ä—ã–≤ –≤ –Ω–∞—á–∞–ª–µ run
    p1 = doc.add_paragraph()
    run1 = p1.add_run()
    run1.add_break(WD_BREAK.PAGE)
    run1.add_text("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å–ª–µ —Ä–∞–∑—Ä—ã–≤–∞")
    
    # –¢–µ—Å—Ç 2: –†–∞–∑—Ä—ã–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º run
    p2 = doc.add_paragraph()
    break_run = p2.add_run()
    break_run.add_break(WD_BREAK.PAGE)
    text_run = p2.add_run("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º run")
    
    # –¢–µ—Å—Ç 3: –ü—É—Å—Ç–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å —Ä–∞–∑—Ä—ã–≤–æ–º
    p3 = doc.add_paragraph()
    p3.add_run().add_break(WD_BREAK.PAGE)
    p4 = doc.add_paragraph("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å–ª–µ –ø—É—Å—Ç–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞")
    
    doc.save("page_break_placement_test.docx")
    
    print("üìã –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: page_break_placement_test.docx")
    print("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
    
    for i, paragraph in enumerate(doc.paragraphs):
        print(f"   –ü–∞—Ä–∞–≥—Ä–∞—Ñ {i+1}: '{paragraph.text}'")
        if paragraph.runs:
            for j, run in enumerate(paragraph.runs):
                has_break = any('br' in elem.tag for elem in run._element)
                print(f"      Run {j+1}: '{run.text}' (—Ä–∞–∑—Ä—ã–≤: {has_break})")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 80)
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –ü–£–°–¢–´–ú–ò –°–¢–†–ê–ù–ò–¶–ê–ú–ò")
    print("=" * 80)
    
    try:
        success = test_empty_pages_issue()
        analyze_page_break_placement()
        
        print("\n" + "=" * 80)
        if not success:
            print("‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê –° –ü–£–°–¢–´–ú–ò –°–¢–†–ê–ù–ò–¶–ê–ú–ò –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê")
            print("üîß –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ì–ò–ö–ò –†–ê–ó–†–´–í–û–í –°–¢–†–ê–ù–ò–¶")
            print("\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
            print("   1. –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            print("   2. –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü")
            print("   3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –≤–º–µ—Å—Ç–æ —Ä–∞–∑—Ä—ã–≤–æ–≤")
        else:
            print("‚úÖ –ü–£–°–¢–´–• –°–¢–†–ê–ù–ò–¶ –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û")
        print("=" * 80)
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main() 