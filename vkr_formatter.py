from docx import Document
from docx.shared import Cm, Pt
from typing import Dict, Any, Tuple
from pathlib import Path

from paragraph_classifier import ParagraphClassifier
from style_based_classifier import StyleBasedClassifier
from paragraph_formatter import ParagraphFormatter
from statistics_tracker import StatisticsTracker
from document_state import logger


class VKRFormatter:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –í–ö–†"""

    def __init__(self, requirements: Dict[str, Any], use_style_based_classification: bool = True, strict_style_mode: bool = False):
        self.requirements = requirements
        self.use_style_based = use_style_based_classification
        
        if use_style_based_classification:
            self.classifier = StyleBasedClassifier(requirements, strict_style_mode=strict_style_mode)
            if strict_style_mode:
                logger.info("üîí –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–¢–†–û–ì–£–Æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª–µ–π (–±–µ–∑ fallback)")
            else:
                logger.info("üé® –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Å fallback)")
        else:
            self.classifier = ParagraphClassifier(requirements)
            logger.info("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
            
        self.formatter = ParagraphFormatter(requirements)
        self.stats = StatisticsTracker()
        self.h1_count = 0  # –°—á–µ—Ç—á–∏–∫ H1 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü)

    def format_document(self, input_path: str, output_path: str) -> bool:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç"""
        try:
            logger.info(f"üìÇ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {input_path}")
            logger.info(f"üíæ –í—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å: {output_path}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            input_file = Path(input_path)
            if not input_file.exists():
                logger.error(f"‚ùå –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {input_path}")
                return False

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            logger.info("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...")
            doc = Document(input_path)
            logger.info(
                f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {len(doc.paragraphs)}")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            logger.info("‚öôÔ∏è  –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
            self._apply_global_settings(doc)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
            logger.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã...")
            self._process_all_paragraphs(doc)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            logger.info("üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
            self._process_all_tables(doc)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤: {output_path}")
            doc.save(output_path)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_file = Path(output_path)
            if output_file.exists():
                logger.info(
                    f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: {output_file.stat().st_size} –±–∞–π—Ç")
            else:
                logger.error(f"‚ùå –§–∞–π–ª –ù–ï —Å–æ–∑–¥–∞–ª—Å—è: {output_path}")
                return False

            final_stats = self.get_statistics()
            logger.info(
                f"üéâ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {final_stats}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            import traceback
            logger.error(f"–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return False

    def _apply_global_settings(self, doc: Document) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            base_config = self.requirements["base_formatting"]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            margins = base_config["margins_cm"]
            for section in doc.sections:
                section.top_margin = Cm(margins["top"])
                section.bottom_margin = Cm(margins["bottom"])
                section.left_margin = Cm(margins["left"])
                section.right_margin = Cm(margins["right"])
            
            logger.info(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –ø–æ–ª—è: {margins}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self._configure_default_styles(doc, base_config)
            
            logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            self.stats.increment('errors')
    

    
    def _configure_default_styles(self, doc: Document, base_config: Dict[str, Any]) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å Normal (–±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å)
            styles = doc.styles
            normal_style = styles['Normal']
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π —à—Ä–∏—Ñ—Ç
            font = normal_style.font
            font.name = base_config["font_name"]
            font.size = Pt(base_config["font_size"])
            
            logger.info("‚úÖ –°—Ç–∏–ª—å Normal –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Ç–æ–ª—å–∫–æ —à—Ä–∏—Ñ—Ç)")
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
    


    def _process_all_paragraphs(self, doc: Document) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤...")

        for i, paragraph in enumerate(doc.paragraphs):
            self.stats.increment('total_paragraphs')

            try:
                text = paragraph.text.strip()
                
                # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                if self.use_style_based:
                    paragraph_type = self.classifier.classify_paragraph_by_style(paragraph, text)
                else:
                    paragraph_type = self.classifier.classify_paragraph(text)

                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
                if text:
                    logger.debug(
                        f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {i+1}: —Ç–∏–ø='{paragraph_type}', —Ç–µ–∫—Å—Ç='{text[:100]}{'...' if len(text) > 100 else ''}'")

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                self._apply_paragraph_formatting(
                    paragraph, paragraph_type, i+1, text)

            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ {i+1}: {e}")
                self.stats.increment('errors')

        final_stats = self.stats.stats
        logger.info(
            f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {final_stats}")

    def _process_all_tables(self, doc: Document) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–∞–±–ª–∏—Ü...")
        
        table_count = 0
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            tables = doc.tables
            
            if not tables:
                logger.info("üìä –¢–∞–±–ª–∏—Ü—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            
            for i, table in enumerate(tables):
                table_count += 1
                
                try:
                    logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É #{i+1}")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
                    self.formatter.format_table(table)
                    self.stats.increment('tables_formatted')
                    
                    logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ #{i+1} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                    
                except Exception as e:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã #{i+1}: {e}")
                    self.stats.increment('errors')
            
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {table_count}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
            self.stats.increment('errors')

    def _apply_paragraph_formatting(self, paragraph, paragraph_type: str, index: int, text: str) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É"""
        if paragraph_type == "skip":
            self.stats.increment('skipped_paragraphs')
            logger.info(
                f"‚è≠Ô∏è  –ü–†–û–ü–£–°–ö #{index}: {text[:60]}{'...' if len(text) > 60 else ''}")

        elif paragraph_type == "h1":
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ H1 (–¥–ª—è —Ä–∞–∑—Ä—ã–≤–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü)
            self.h1_count += 1
            
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å—á–µ—Ç—á–∏–∫ H1 –≤ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä (–¥–ª—è —Ä–∞–∑—Ä—ã–≤–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü)
            self.formatter.format_h1(paragraph, self.h1_count - 1)
            
            self.stats.increment('h1_formatted')
            logger.info(f"üìù H1 #{index}: {text[:40]}...")

        elif paragraph_type == "h2":
            self.formatter.format_h2(paragraph)
            self.stats.increment('h2_formatted')
            logger.info(f"üìÑ H2 #{index}: {text[:40]}...")

        elif paragraph_type == "h3":
            self.formatter.format_h3(paragraph)
            self.stats.increment('h3_formatted')
            logger.info(f"üìã H3 #{index}: {text[:40]}...")

        elif paragraph_type == "h4":
            self.formatter.format_h4(paragraph)
            self.stats.increment('h4_formatted')
            logger.info(f"üìå H4 #{index}: {text[:40]}...")

        elif paragraph_type == "list":
            self.formatter.format_list(paragraph)
            self.stats.increment('lists_formatted')
            logger.debug(f"üìã –°–ü–ò–°–û–ö #{index}: {text[:40]}...")

        elif paragraph_type == "references_header":
            self.formatter.format_references_header(paragraph)
            self.stats.increment('references_headers_formatted')
            logger.info(f"üìö –ó–ê–ì–û–õ–û–í–û–ö –°–ü–ò–°–ö–ê –õ–ò–¢–ï–†–ê–¢–£–†–´ #{index}: {text[:40]}...")

        elif paragraph_type == "bibliography_entry":
            self.formatter.format_bibliography_entry(paragraph)
            self.stats.increment('bibliography_entries_formatted')
            logger.info(f"üìñ –ë–ò–ë–õ–ò–û–ì–†–ê–§–ò–ß–ï–°–ö–ê–Ø –ó–ê–ü–ò–°–¨ #{index}: {text[:60]}...")

        elif paragraph_type == "bibliography_continuation":
            self.formatter.format_bibliography_continuation(paragraph)
            self.stats.increment('bibliography_continuations_formatted')
            logger.info(f"üìÑ –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –ó–ê–ü–ò–°–ò #{index}: {text[:60]}...")

        elif paragraph_type == "references_text":
            self.formatter.format_references_text(paragraph)
            self.stats.increment('references_text_formatted')
            logger.debug(f"üìù –¢–ï–ö–°–¢ –í –°–ü–ò–°–ö–ï –õ–ò–¢–ï–†–ê–¢–£–†–´ #{index}: {text[:40]}...")

        elif paragraph_type.startswith("special_"):
            section_name = paragraph_type.replace("special_", "")
            self.formatter.format_special_section(paragraph, section_name)
            self.stats.increment(f'special_{section_name}_formatted')
            logger.info(f"‚≠ê –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –†–ê–ó–î–ï–õ ({section_name.upper()}) #{index}: {text[:40]}...")

        elif paragraph_type == "table_caption":
            self.formatter.format_table_caption(paragraph)
            self.stats.increment('table_captions_formatted')
            logger.debug(f"üìä –ü–û–î–ü–ò–°–¨ –¢–ê–ë–õ–ò–¶–´ #{index}: {text[:40]}...")

        elif paragraph_type == "figure_image":
            self.formatter.format_figure_image(paragraph)
            self.stats.increment('figure_images_formatted')
            logger.info(f"üñºÔ∏è –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –†–ò–°–£–ù–ö–ê #{index}")

        elif paragraph_type == "figure_caption":
            self.formatter.format_figure_caption(paragraph)
            self.stats.increment('figure_captions_formatted')
            logger.info(f"üñºÔ∏è –ü–û–î–ü–ò–°–¨ –†–ò–°–£–ù–ö–ê #{index}: {text[:60]}...")

        elif paragraph_type == "formula":
            self.formatter.format_formula(paragraph)
            self.stats.increment('formulas_formatted')
            logger.info(f"üî¢ –§–û–†–ú–£–õ–ê #{index}: {text[:40]}...")

        elif paragraph_type == "formula_numbering":
            self.formatter.format_formula_numbering(paragraph)
            self.stats.increment('formula_numbering_formatted')
            logger.info(f"üî¢ –ù–£–ú–ï–†–ê–¶–ò–Ø –§–û–†–ú–£–õ–´ #{index}: {text[:40]}...")

        elif paragraph_type == "formula_explanation":
            self.formatter.format_formula_explanation(paragraph)
            self.stats.increment('formula_explanations_formatted')
            logger.info(f"üî§ –ü–û–Ø–°–ù–ï–ù–ò–ï –ö –§–û–†–ú–£–õ–ï #{index}: {text[:60]}...")

        else:  # regular
            self.formatter.format_regular(paragraph)
            self.stats.increment('regular_formatted')
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if self.classifier.get_state().in_references_section:
                logger.warning(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°—Ç—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ 'regular': {text[:60]}...")

    def get_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return self.stats.get_statistics(self.classifier.get_state())


def format_vkr_document(input_path: str, requirements: Dict[str, Any], output_path: str, use_style_based: bool = True, strict_style_mode: bool = False) -> Tuple[bool, Dict[str, Any]]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –í–ö–† —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º

    Args:
        input_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –í–ö–†
        requirements: —Å–ª–æ–≤–∞—Ä—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        output_path: –ø—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º—É —Ñ–∞–π–ª—É
        use_style_based: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        strict_style_mode: —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º —Å—Ç–∏–ª–µ–π - –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è Normal —Å—Ç–∏–ª—è

    Returns:
        tuple: (—É—Å–ø–µ—Ö, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    """
    formatter = VKRFormatter(requirements, use_style_based_classification=use_style_based, strict_style_mode=strict_style_mode)
    success = formatter.format_document(input_path, output_path)
    stats = formatter.get_statistics()

    return success, stats
