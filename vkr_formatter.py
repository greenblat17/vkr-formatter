from docx import Document
from docx.shared import Cm
from typing import Dict, Any, Tuple
from pathlib import Path

from paragraph_classifier import ParagraphClassifier
from paragraph_formatter import ParagraphFormatter
from statistics_tracker import StatisticsTracker
from document_state import logger

class VKRFormatter:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –í–ö–†"""
    
    def __init__(self, requirements: Dict[str, Any]):
        self.requirements = requirements
        self.classifier = ParagraphClassifier(requirements)
        self.formatter = ParagraphFormatter(requirements)
        self.stats = StatisticsTracker()
    
    def format_document(self, input_path: str, output_path: str) -> bool:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç"""
        try:
            logger.info(f"üìÇ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {input_path}")
            logger.info(f"üíæ –í—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å: {output_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            input_file = Path(input_path)
            if not input_file.exists():
                logger.error(f"‚ùå –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {input_path}")
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            logger.info("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...")
            doc = Document(input_path)
            logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {len(doc.paragraphs)}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            logger.info("‚öôÔ∏è  –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
            self._apply_global_settings(doc)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
            logger.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã...")
            self._process_all_paragraphs(doc)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤: {output_path}")
            doc.save(output_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_file = Path(output_path)
            if output_file.exists():
                logger.info(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: {output_file.stat().st_size} –±–∞–π—Ç")
            else:
                logger.error(f"‚ùå –§–∞–π–ª –ù–ï —Å–æ–∑–¥–∞–ª—Å—è: {output_path}")
                return False
            
            final_stats = self.get_statistics()
            logger.info(f"üéâ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {final_stats}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            import traceback
            logger.error(f"–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return False
    
    def _apply_global_settings(self, doc: Document) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            margins = self.requirements["base_formatting"]["margins_cm"]
            
            for section in doc.sections:
                section.top_margin = Cm(margins["top"])
                section.bottom_margin = Cm(margins["bottom"])
                section.left_margin = Cm(margins["left"])
                section.right_margin = Cm(margins["right"])
            
            logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –ø–æ–ª—è: {margins}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            self.stats.increment('errors')
    
    def _process_all_paragraphs(self, doc: Document) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤...")
        
        for i, paragraph in enumerate(doc.paragraphs):
            self.stats.increment('total_paragraphs')
            
            try:
                text = paragraph.text.strip()
                paragraph_type = self.classifier.classify_paragraph(text)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
                if text:
                    logger.debug(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {i+1}: —Ç–∏–ø='{paragraph_type}', —Ç–µ–∫—Å—Ç='{text[:100]}{'...' if len(text) > 100 else ''}'")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                self._apply_paragraph_formatting(paragraph, paragraph_type, i+1, text)
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ {i+1}: {e}")
                self.stats.increment('errors')
        
        final_stats = self.stats.stats
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {final_stats}")
    
    def _apply_paragraph_formatting(self, paragraph, paragraph_type: str, index: int, text: str) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É"""
        if paragraph_type == "skip":
            self.stats.increment('skipped_paragraphs')
            logger.info(f"‚è≠Ô∏è  –ü–†–û–ü–£–°–ö #{index}: {text[:60]}{'...' if len(text) > 60 else ''}")
            
        elif paragraph_type == "h1":
            self.formatter.format_h1(paragraph)
            self.stats.increment('h1_formatted')
            logger.info(f"üìù H1 #{index}: {text[:40]}...")
            
        elif paragraph_type == "h2":
            self.formatter.format_h2(paragraph)
            self.stats.increment('h2_formatted')
            logger.info(f"üìÑ H2 #{index}: {text[:40]}...")
            
        elif paragraph_type == "list":
            self.formatter.format_list(paragraph)
            self.stats.increment('lists_formatted')
            logger.debug(f"üìã –°–ü–ò–°–û–ö #{index}: {text[:40]}...")
            
        else:  # regular
            self.formatter.format_regular(paragraph)
            self.stats.increment('regular_formatted')
    
    def get_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return self.stats.get_statistics(self.classifier.get_state())

def format_vkr_document(input_path: str, requirements: Dict[str, Any], output_path: str) -> Tuple[bool, Dict[str, Any]]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –í–ö–† —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    
    Args:
        input_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –í–ö–†
        requirements: —Å–ª–æ–≤–∞—Ä—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        output_path: –ø—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º—É —Ñ–∞–π–ª—É
        
    Returns:
        tuple: (—É—Å–ø–µ—Ö, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    """
    formatter = VKRFormatter(requirements)
    success = formatter.format_document(input_path, output_path)
    stats = formatter.get_statistics()
    
    return success, stats 