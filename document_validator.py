"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –í–ö–† –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

from docx import Document
from docx.shared import Cm, Pt
from typing import Dict, Any, List, Tuple
from pathlib import Path
from dataclasses import dataclass, field

from style_based_classifier import StyleBasedClassifier
from document_state import logger


@dataclass
class ValidationIssue:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    type: str  # "error", "warning", "info"
    category: str  # "margins", "fonts", "headings", "lists", etc.
    description: str
    location: str  # –≥–¥–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞
    expected: str  # —á—Ç–æ –æ–∂–∏–¥–∞–ª–æ—Å—å
    actual: str  # —á—Ç–æ –Ω–∞–π–¥–µ–Ω–æ
    suggestion: str = ""  # —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é


@dataclass
class ValidationReport:
    """–û—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    total_issues: int = 0
    errors: int = 0
    warnings: int = 0
    info: int = 0
    issues: List[ValidationIssue] = field(default_factory=list)
    statistics: Dict[str, Any] = field(default_factory=dict)
    
    def add_issue(self, issue: ValidationIssue):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –≤ –æ—Ç—á–µ—Ç"""
        self.issues.append(issue)
        self.total_issues += 1
        
        if issue.type == "error":
            self.errors += 1
        elif issue.type == "warning":
            self.warnings += 1
        elif issue.type == "info":
            self.info += 1
    
    def get_summary(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É"""
        return {
            "total_issues": self.total_issues,
            "errors": self.errors,
            "warnings": self.warnings,
            "info": self.info,
            "score": self._calculate_score()
        }
    
    def _calculate_score(self) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è (0-100)"""
        if self.total_issues == 0:
            return 100
        
        # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–±–ª–µ–º
        error_weight = 3
        warning_weight = 2
        info_weight = 1
        
        total_weight = (self.errors * error_weight + 
                       self.warnings * warning_weight + 
                       self.info * info_weight)
        
        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–±–ª–µ–º
        max_possible_weight = 50  # –£—Å–ª–æ–≤–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤–µ—Å–æ–≤
        score = max(0, 100 - (total_weight * 100) // max_possible_weight)
        
        return min(100, score)


class DocumentValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –í–ö–†"""

    def __init__(self, requirements: Dict[str, Any]):
        self.requirements = requirements
        self.classifier = StyleBasedClassifier(requirements, strict_style_mode=False)
        
    def validate_document(self, input_path: str) -> ValidationReport:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
        report = ValidationReport()
        
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é: {input_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            input_file = Path(input_path)
            if not input_file.exists():
                report.add_issue(ValidationIssue(
                    type="error",
                    category="file",
                    description="–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                    location=input_path,
                    expected="–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª",
                    actual="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
                ))
                return report
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc = Document(input_path)
            logger.info(f"üìñ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {len(doc.paragraphs)}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            self._validate_global_settings(doc, report)
            self._validate_paragraphs(doc, report)
            self._validate_tables(doc, report)
            self._validate_document_structure(doc, report)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            report.statistics = self._collect_statistics(doc)
            
            logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {report.total_issues}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ —Å–æ–±—Ä–∞–Ω–∞
            if not report.statistics:
                report.statistics = {
                    "total_paragraphs": 0,
                    "total_tables": 0,
                    "total_sections": 0,
                    "heading_counts": {"h1": 0, "h2": 0, "h3": 0, "h4": 0},
                    "list_items": 0,
                    "regular_paragraphs": 0,
                    "empty_paragraphs": 0
                }
            report.add_issue(ValidationIssue(
                type="error",
                category="system",
                description=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}",
                location="–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞",
                expected="–£—Å–ø–µ—à–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è",
                actual=str(e)
            ))
        
        return report
    
    def _validate_global_settings(self, doc: Document, report: ValidationReport):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
        
        base_config = self.requirements["base_formatting"]
        expected_margins = base_config["margins_cm"]
        
        for i, section in enumerate(doc.sections):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏
            actual_margins = {
                "top": round(section.top_margin.cm, 2),
                "bottom": round(section.bottom_margin.cm, 2),
                "left": round(section.left_margin.cm, 2),
                "right": round(section.right_margin.cm, 2)
            }
            
            for margin_name, expected_value in expected_margins.items():
                actual_value = actual_margins[margin_name]
                tolerance = 0.1  # –î–æ–ø—É—Å–∫ –≤ —Å–º
                
                if abs(actual_value - expected_value) > tolerance:
                    severity = "error" if abs(actual_value - expected_value) > 0.5 else "warning"
                    report.add_issue(ValidationIssue(
                        type=severity,
                        category="margins",
                        description=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ {margin_name} –ø–æ–ª–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                        location=f"–°–µ–∫—Ü–∏—è {i+1} (—Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞)",
                        expected=f"{margin_name} –ø–æ–ª–µ: {expected_value} —Å–º",
                        actual=f"{margin_name} –ø–æ–ª–µ: {actual_value} —Å–º (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {abs(actual_value - expected_value):.2f} —Å–º)",
                        suggestion=f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ú–∞–∫–µ—Ç ‚Üí –ü–æ–ª—è ‚Üí –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ {margin_name} –ø–æ–ª–µ = {expected_value} —Å–º"
                    ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if section.orientation != 0:  # 0 = portrait, 1 = landscape
                report.add_issue(ValidationIssue(
                    type="warning",
                    category="margins",
                    description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
                    location=f"–°–µ–∫—Ü–∏—è {i+1}",
                    expected="–ö–Ω–∏–∂–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è",
                    actual="–ê–ª—å–±–æ–º–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è",
                    suggestion="–ò–∑–º–µ–Ω–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞ –∫–Ω–∏–∂–Ω—É—é —á–µ—Ä–µ–∑ –ú–∞–∫–µ—Ç ‚Üí –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è ‚Üí –ö–Ω–∏–∂–Ω–∞—è"
                ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_width = section.page_width.cm
            page_height = section.page_height.cm
            # A4: 21.0 x 29.7 —Å–º
            if abs(page_width - 21.0) > 0.5 or abs(page_height - 29.7) > 0.5:
                report.add_issue(ValidationIssue(
                    type="warning",
                    category="margins",
                    description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
                    location=f"–°–µ–∫—Ü–∏—è {i+1}",
                    expected="–§–æ—Ä–º–∞—Ç A4 (21.0 √ó 29.7 —Å–º)",
                    actual=f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {page_width:.1f} √ó {page_height:.1f} —Å–º",
                    suggestion="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç A4 —á–µ—Ä–µ–∑ –ú–∞–∫–µ—Ç ‚Üí –†–∞–∑–º–µ—Ä ‚Üí A4"
                ))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        self._validate_default_styles(doc, report, base_config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü
        self._check_page_numbering(doc, report)
    
    def _validate_default_styles(self, doc: Document, report: ValidationReport, base_config: Dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            normal_style = doc.styles['Normal']
            font = normal_style.font
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à—Ä–∏—Ñ—Ç
            expected_font = base_config["font_name"]
            if font.name != expected_font:
                report.add_issue(ValidationIssue(
                    type="error",
                    category="fonts",
                    description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç –≤ —Å—Ç–∏–ª–µ Normal",
                    location="–°—Ç–∏–ª—å Normal",
                    expected=expected_font,
                    actual=font.name or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    suggestion=f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —à—Ä–∏—Ñ—Ç '{expected_font}' –¥–ª—è —Å—Ç–∏–ª—è Normal"
                ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            expected_size = base_config["font_size"]
            actual_size = font.size.pt if font.size else None
            
            if actual_size != expected_size:
                report.add_issue(ValidationIssue(
                    type="error",
                    category="fonts",
                    description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –≤ —Å—Ç–∏–ª–µ Normal",
                    location="–°—Ç–∏–ª—å Normal",
                    expected=f"{expected_size} –ø—Ç",
                    actual=f"{actual_size} –ø—Ç" if actual_size else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    suggestion=f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ {expected_size} –ø—Ç –¥–ª—è —Å—Ç–∏–ª—è Normal"
                ))
                
        except Exception as e:
            report.add_issue(ValidationIssue(
                type="warning",
                category="fonts",
                description=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∏–ª—å Normal: {str(e)}",
                location="–°—Ç–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                expected="–î–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ç–∏–ª—å Normal",
                actual="–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∏–ª—é"
            ))
    
    def _validate_paragraphs(self, doc: Document, report: ValidationReport):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã...")
        
        heading_counts = {"h1": 0, "h2": 0, "h3": 0, "h4": 0}
        list_items = 0
        regular_paragraphs = 0
        
        for i, paragraph in enumerate(doc.paragraphs):
            text = paragraph.text.strip()
            if not text:
                continue
                
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            paragraph_type = self.classifier.classify_paragraph_by_style(paragraph, text)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∏–ª–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
            style_name = self._get_paragraph_style_name(paragraph)
            text_preview = text[:50] + "..." if len(text) > 50 else text
            
            if paragraph_type in heading_counts:
                heading_counts[paragraph_type] += 1
                self._validate_heading(paragraph, paragraph_type, i+1, report, text_preview, style_name)
            elif paragraph_type == "list":
                list_items += 1
                self._validate_list_item(paragraph, i+1, report, text_preview)
            elif paragraph_type == "regular":
                regular_paragraphs += 1
                self._validate_regular_paragraph(paragraph, i+1, report, text_preview)
            elif paragraph_type == "skip":
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö
                logger.debug(f"   üîÑ –ü—Ä–æ–ø—É—â–µ–Ω –ø–∞—Ä–∞–≥—Ä–∞—Ñ {i+1}: {text_preview}")
            else:
                # –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
                report.add_issue(ValidationIssue(
                    type="info",
                    category="structure",
                    description=f"–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–∏–ø –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞",
                    location=f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {i+1}: \"{text_preview}\"",
                    expected="–û–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–∏–ø (–∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)",
                    actual=f"–¢–∏–ø: {paragraph_type}, –°—Ç–∏–ª—å: {style_name}",
                    suggestion="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å—Ç–∏–ª—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"
                ))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if heading_counts["h1"] == 0:
            report.add_issue(ValidationIssue(
                type="warning",
                category="structure",
                description="–í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è",
                location="–í–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç",
                expected="–ú–∏–Ω–∏–º—É–º 1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1 (–≥–ª–∞–≤—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞)",
                actual="0 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ H1",
                suggestion="–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≥–ª–∞–≤ (H1) –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤: –í–≤–µ–¥–µ–Ω–∏–µ, –ì–ª–∞–≤–∞ 1, –ì–ª–∞–≤–∞ 2, –ó–∞–∫–ª—é—á–µ–Ω–∏–µ"
            ))
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        total_headings = sum(heading_counts.values())
        if total_headings > 0:
            h1_ratio = heading_counts["h1"] / total_headings
            if h1_ratio > 0.5:
                report.add_issue(ValidationIssue(
                    type="info",
                    category="structure",
                    description="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ H1 –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥—Ä—É–≥–∏—Ö —É—Ä–æ–≤–Ω–µ–π",
                    location=f"H1: {heading_counts['h1']}, H2: {heading_counts['h2']}, H3: {heading_counts['h3']}",
                    expected="H1 —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç 20-40% –æ—Ç –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤",
                    actual=f"H1 —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç {h1_ratio*100:.1f}% –æ—Ç –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤",
                    suggestion="–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≥–ª–∞–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ H2-H3"
                ))

    def _get_paragraph_style_name(self, paragraph) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if paragraph.style and paragraph.style.name:
                return paragraph.style.name
            else:
                return "Normal (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Å—Ç–∏–ª—è: {str(e)}"

    def _validate_heading(self, paragraph, heading_type: str, paragraph_num: int, report: ValidationReport, text_preview: str, style_name: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        requirements = self.requirements[f"{heading_type}_formatting"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π run –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ
        for run_index, run in enumerate(paragraph.runs):
            run_text = run.text.strip()
            if not run_text:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ runs
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à—Ä–∏—Ñ—Ç
            actual_font = run.font.name or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            expected_font = requirements["font_name"]
            if actual_font != expected_font:
                report.add_issue(ValidationIssue(
                    type="error",
                    category="headings",
                    description=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ {heading_type.upper()}",
                    location=f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_num}, —Ñ—Ä–∞–≥–º–µ–Ω—Ç {run_index+1}: \"{text_preview}\"",
                    expected=f"–®—Ä–∏—Ñ—Ç: {expected_font}",
                    actual=f"–®—Ä–∏—Ñ—Ç: {actual_font}, –°—Ç–∏–ª—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {style_name}",
                    suggestion=f"–í—ã–¥–µ–ª–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —à—Ä–∏—Ñ—Ç '{expected_font}' —á–µ—Ä–µ–∑ –º–µ–Ω—é –ì–ª–∞–≤–Ω–∞—è ‚Üí –®—Ä–∏—Ñ—Ç"
                ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            actual_size = run.font.size.pt if run.font.size else None
            expected_size = requirements["font_size"]
            if actual_size and actual_size != expected_size:
                report.add_issue(ValidationIssue(
                    type="error",
                    category="headings",
                    description=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ {heading_type.upper()}",
                    location=f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_num}: \"{text_preview}\"",
                    expected=f"–†–∞–∑–º–µ—Ä: {expected_size} –ø—Ç",
                    actual=f"–†–∞–∑–º–µ—Ä: {actual_size} –ø—Ç, –°—Ç–∏–ª—å: {style_name}",
                    suggestion=f"–í—ã–¥–µ–ª–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑–º–µ—Ä {expected_size} –ø—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é –ì–ª–∞–≤–Ω–∞—è ‚Üí –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞"
                ))
            elif not actual_size:
                report.add_issue(ValidationIssue(
                    type="warning",
                    category="headings",
                    description=f"–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ {heading_type.upper()}",
                    location=f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_num}: \"{text_preview}\"",
                    expected=f"–†–∞–∑–º–µ—Ä: {expected_size} –ø—Ç",
                    actual="–†–∞–∑–º–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
                    suggestion=f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ {expected_size} –ø—Ç"
                ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∏—Ä–Ω–æ—Å—Ç—å
            is_bold = run.font.bold
            should_be_bold = requirements.get("bold", False)
            if should_be_bold and not is_bold:
                report.add_issue(ValidationIssue(
                    type="error",
                    category="headings",
                    description=f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ {heading_type.upper()} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∂–∏—Ä–Ω—ã–º",
                    location=f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_num}: \"{text_preview}\"",
                    expected="–ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç (Bold)",
                    actual=f"–û–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç, –°—Ç–∏–ª—å: {style_name}",
                    suggestion="–í—ã–¥–µ–ª–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+B –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ñ' –Ω–∞ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
                ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å–∏–≤ (–µ—Å–ª–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å)
            is_italic = run.font.italic
            if is_italic and not requirements.get("italic", False):
                report.add_issue(ValidationIssue(
                    type="warning",
                    category="headings",
                    description=f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ {heading_type.upper()} –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—É—Ä—Å–∏–≤–Ω—ã–º",
                    location=f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_num}: \"{text_preview}\"",
                    expected="–û–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç (–±–µ–∑ –∫—É—Ä—Å–∏–≤–∞)",
                    actual="–ö—É—Ä—Å–∏–≤–Ω—ã–π —à—Ä–∏—Ñ—Ç",
                    suggestion="–°–Ω–∏–º–∏—Ç–µ –∫—É—Ä—Å–∏–≤ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ (Ctrl+I)"
                ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (–æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ)
            is_underlined = run.font.underline
            if is_underlined:
                report.add_issue(ValidationIssue(
                    type="info",
                    category="headings",
                    description=f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ {heading_type.upper()} –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç",
                    location=f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_num}: \"{text_preview}\"",
                    expected="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è",
                    actual="–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç",
                    suggestion="–û–±—ã—á–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—é—Ç. –°–Ω–∏–º–∏—Ç–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (Ctrl+U)"
                ))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        expected_alignment = requirements.get("alignment", "center")
        self._check_alignment(paragraph, expected_alignment, f"–∑–∞–≥–æ–ª–æ–≤–∫–∞ {heading_type.upper()}", 
                             paragraph_num, report, text_preview)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        line_spacing = paragraph.paragraph_format.line_spacing
        if line_spacing and line_spacing != 1.0:
            report.add_issue(ValidationIssue(
                type="warning",
                category="headings",
                description=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ {heading_type.upper()}",
                location=f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_num}: \"{text_preview}\"",
                expected="–û–¥–∏–Ω–∞—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (1.0)",
                actual=f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {line_spacing}",
                suggestion="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω–∞—Ä–Ω—ã–π –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"
            ))

    def _validate_list_item(self, paragraph, paragraph_num: int, report: ValidationReport, text_preview: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        list_config = self.requirements["lists"]["bullet_lists"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
        expected_indent = Cm(list_config["indent_cm"])
        actual_indent = paragraph.paragraph_format.left_indent
        actual_cm = actual_indent.cm if actual_indent else 0
        
        if abs(actual_cm - list_config["indent_cm"]) > 0.1:  # –î–æ–ø—É—Å–∫ 1–º–º
            report.add_issue(ValidationIssue(
                type="warning",
                category="lists",
                description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞",
                location=f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_num}: \"{text_preview}\"",
                expected=f"–û—Ç—Å—Ç—É–ø: {list_config['indent_cm']} —Å–º",
                actual=f"–û—Ç—Å—Ç—É–ø: {actual_cm:.2f} —Å–º",
                suggestion=f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ—Ç—Å—Ç—É–ø {list_config['indent_cm']} —Å–º —á–µ—Ä–µ–∑ –ì–ª–∞–≤–Ω–∞—è ‚Üí –£–≤–µ–ª–∏—á–∏—Ç—å –æ—Ç—Å—Ç—É–ø –∏–ª–∏ –§–æ—Ä–º–∞—Ç ‚Üí –ê–±–∑–∞—Ü"
            ))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Å—è—á–∏–π –æ—Ç—Å—Ç—É–ø
        hanging_indent = paragraph.paragraph_format.first_line_indent
        if hanging_indent and hanging_indent.cm < -0.1:  # –ï—Å—Ç—å –≤–∏—Å—è—á–∏–π –æ—Ç—Å—Ç—É–ø
            report.add_issue(ValidationIssue(
                type="info",
                category="lists",
                description="–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–∏—Å—è—á–∏–π –æ—Ç—Å—Ç—É–ø –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞",
                location=f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_num}: \"{text_preview}\"",
                expected="–û–±—ã—á–Ω—ã–π –æ—Ç—Å—Ç—É–ø –±–µ–∑ –≤–∏—Å—è—á–µ–≥–æ",
                actual=f"–í–∏—Å—è—á–∏–π –æ—Ç—Å—Ç—É–ø: {hanging_indent.cm:.2f} —Å–º",
                suggestion="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –≤–º–µ—Å—Ç–æ —Ä—É—á–Ω—ã—Ö –æ—Ç—Å—Ç—É–ø–æ–≤"
            ))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        line_spacing = paragraph.paragraph_format.line_spacing
        expected_spacing = 1.0
        if line_spacing and abs(line_spacing - expected_spacing) > 0.1:
            report.add_issue(ValidationIssue(
                type="warning",
                category="lists",
                description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–ø–∏—Å–∫–µ",
                location=f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_num}: \"{text_preview}\"",
                expected=f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {expected_spacing}",
                actual=f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {line_spacing}",
                suggestion="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω–∞—Ä–Ω—ã–π –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞"
            ))

    def _validate_regular_paragraph(self, paragraph, paragraph_num: int, report: ValidationReport, text_preview: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        base_config = self.requirements["base_formatting"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        expected_indent = Cm(base_config["first_line_indent_cm"])
        actual_indent = paragraph.paragraph_format.first_line_indent
        actual_cm = actual_indent.cm if actual_indent else 0
        
        if abs(actual_cm - base_config["first_line_indent_cm"]) > 0.1:  # –î–æ–ø—É—Å–∫ 1–º–º
            report.add_issue(ValidationIssue(
                type="warning",
                category="paragraphs",
                description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞",
                location=f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_num}: \"{text_preview}\"",
                expected=f"–ö—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {base_config['first_line_indent_cm']} —Å–º",
                actual=f"–ö—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {actual_cm:.2f} —Å–º",
                suggestion=f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–∞—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É {base_config['first_line_indent_cm']} —Å–º —á–µ—Ä–µ–∑ –§–æ—Ä–º–∞—Ç ‚Üí –ê–±–∑–∞—Ü ‚Üí –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –û—Ç—Å—Ç—É–ø"
            ))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        self._check_alignment(paragraph, "justify", "–æ–±—ã—á–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞", paragraph_num, report, text_preview)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        line_spacing = paragraph.paragraph_format.line_spacing
        expected_spacing = base_config.get("line_spacing", 1.5)
        if line_spacing and abs(line_spacing - expected_spacing) > 0.1:
            report.add_issue(ValidationIssue(
                type="warning",
                category="paragraphs",
                description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
                location=f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_num}: \"{text_preview}\"",
                expected=f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {expected_spacing}",
                actual=f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {line_spacing}",
                suggestion=f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–µ–∂–¥—É—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª {expected_spacing} —á–µ—Ä–µ–∑ –§–æ—Ä–º–∞—Ç ‚Üí –ê–±–∑–∞—Ü ‚Üí –ú–µ–∂–¥—É—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª"
            ))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à—Ä–∏—Ñ—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        for run in paragraph.runs:
            if run.text.strip():  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à—Ä–∏—Ñ—Ç
                actual_font = run.font.name
                expected_font = base_config["font_name"]
                if actual_font and actual_font != expected_font:
                    report.add_issue(ValidationIssue(
                        type="error",
                        category="fonts",
                        description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–µ",
                        location=f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_num}: \"{text_preview}\"",
                        expected=f"–®—Ä–∏—Ñ—Ç: {expected_font}",
                        actual=f"–®—Ä–∏—Ñ—Ç: {actual_font}",
                        suggestion=f"–í—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —à—Ä–∏—Ñ—Ç '{expected_font}'"
                    ))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
                actual_size = run.font.size.pt if run.font.size else None
                expected_size = base_config["font_size"]
                if actual_size and actual_size != expected_size:
                    report.add_issue(ValidationIssue(
                        type="error",
                        category="fonts",
                        description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–µ",
                        location=f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_num}: \"{text_preview}\"",
                        expected=f"–†–∞–∑–º–µ—Ä: {expected_size} –ø—Ç",
                        actual=f"–†–∞–∑–º–µ—Ä: {actual_size} –ø—Ç",
                        suggestion=f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ {expected_size} –ø—Ç"
                    ))
                break  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π run —Å —Ç–µ–∫—Å—Ç–æ–º

    def _check_alignment(self, paragraph, expected_alignment: str, element_type: str, 
                        paragraph_num: int, report: ValidationReport, text_preview: str = ""):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        from docx.enum.text import WD_ALIGN_PARAGRAPH
        
        alignment_map = {
            "left": WD_ALIGN_PARAGRAPH.LEFT,
            "center": WD_ALIGN_PARAGRAPH.CENTER,
            "right": WD_ALIGN_PARAGRAPH.RIGHT,
            "justify": WD_ALIGN_PARAGRAPH.JUSTIFY
        }
        
        alignment_names = {
            WD_ALIGN_PARAGRAPH.LEFT: "–ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é",
            WD_ALIGN_PARAGRAPH.CENTER: "–ø–æ —Ü–µ–Ω—Ç—Ä—É", 
            WD_ALIGN_PARAGRAPH.RIGHT: "–ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é",
            WD_ALIGN_PARAGRAPH.JUSTIFY: "–ø–æ —à–∏—Ä–∏–Ω–µ",
            None: "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        }
        
        expected_enum = alignment_map.get(expected_alignment)
        actual_enum = paragraph.paragraph_format.alignment
        
        if actual_enum != expected_enum:
            actual_name = alignment_names.get(actual_enum, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ")
            expected_name = alignment_names.get(expected_enum, expected_alignment)
            
            location = f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_num}"
            if text_preview:
                location += f": \"{text_preview}\""
            
            report.add_issue(ValidationIssue(
                type="warning",
                category="alignment",
                description=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ {element_type}",
                location=location,
                expected=f"–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: {expected_name}",
                actual=f"–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: {actual_name}",
                suggestion=f"–í—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ '{expected_name}' —á–µ—Ä–µ–∑ –ì–ª–∞–≤–Ω–∞—è ‚Üí –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏–ª–∏ Ctrl+E/L/R/J"
            ))
    
    def _validate_tables(self, doc: Document, report: ValidationReport):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
        
        if not doc.tables:
            report.add_issue(ValidationIssue(
                type="info",
                category="tables",
                description="–í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü",
                location="–í–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç",
                expected="–í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                actual="–¢–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                suggestion="–ï—Å–ª–∏ –≤ —Ä–∞–±–æ—Ç–µ –µ—Å—Ç—å —Ç–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ñ–æ—Ä–º–∏—Ç–µ –∏—Ö –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü"
            ))
            return
        
        table_config = self.requirements.get("tables", {})
        
        for i, table in enumerate(doc.tables):
            table_location = f"–¢–∞–±–ª–∏—Ü–∞ {i+1}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ–∫
            if not table.rows:
                report.add_issue(ValidationIssue(
                    type="warning",
                    category="tables",
                    description="–ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞",
                    location=table_location,
                    expected="–¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ (–∑–∞–≥–æ–ª–æ–≤–∫–∏ + —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö)",
                    actual="–¢–∞–±–ª–∏—Ü–∞ –±–µ–∑ —Å—Ç—Ä–æ–∫",
                    suggestion="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –µ—ë"
                ))
                continue
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã
            total_cells = 0
            empty_cells = 0
            
            for row_idx, row in enumerate(table.rows):
                for cell_idx, cell in enumerate(row.cells):
                    total_cells += 1
                    cell_text = cell.text.strip()
                    
                    if not cell_text:
                        empty_cells += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫
                    for paragraph in cell.paragraphs:
                        if paragraph.text.strip():
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤ —è—á–µ–π–∫–∞—Ö
                            if paragraph.paragraph_format.alignment is None:
                                report.add_issue(ValidationIssue(
                                    type="info",
                                    category="tables",
                                    description="–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤ —è—á–µ–π–∫–µ —Ç–∞–±–ª–∏—Ü—ã",
                                    location=f"{table_location}, —Å—Ç—Ä–æ–∫–∞ {row_idx+1}, —Å—Ç–æ–ª–±–µ—Ü {cell_idx+1}",
                                    expected="–Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ (–æ–±—ã—á–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)",
                                    actual="–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                                    suggestion="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–ª—è —è—á–µ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã"
                                ))
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à—Ä–∏—Ñ—Ç –≤ —è—á–µ–π–∫–∞—Ö
                            for run in paragraph.runs:
                                if run.text.strip() and run.font.name:
                                    expected_font = self.requirements["base_formatting"]["font_name"]
                                    if run.font.name != expected_font:
                                        report.add_issue(ValidationIssue(
                                            type="warning",
                                            category="tables",
                                            description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ",
                                            location=f"{table_location}, —Å—Ç—Ä–æ–∫–∞ {row_idx+1}, —Å—Ç–æ–ª–±–µ—Ü {cell_idx+1}",
                                            expected=f"–®—Ä–∏—Ñ—Ç: {expected_font}",
                                            actual=f"–®—Ä–∏—Ñ—Ç: {run.font.name}",
                                            suggestion=f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —à—Ä–∏—Ñ—Ç '{expected_font}' –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã"
                                        ))
                                break
                            break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã
            if total_cells > 0:
                empty_ratio = empty_cells / total_cells
                if empty_ratio > 0.3:  # –ë–æ–ª–µ–µ 30% –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
                    report.add_issue(ValidationIssue(
                        type="warning",
                        category="tables",
                        description="–ú–Ω–æ–≥–æ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ",
                        location=f"{table_location} ({len(table.rows)} —Å—Ç—Ä–æ–∫, {len(table.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤)",
                        expected="–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–º–µ–Ω–µ–µ 30% –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫)",
                        actual=f"–ü—É—Å—Ç—ã—Ö —è—á–µ–µ–∫: {empty_cells} –∏–∑ {total_cells} ({empty_ratio*100:.1f}%)",
                        suggestion="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏/—Å—Ç–æ–ª–±—Ü—ã"
                    ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            if len(table.rows) > 0:
                first_row = table.rows[0]
                has_headers = False
                
                for cell in first_row.cells:
                    for paragraph in cell.paragraphs:
                        for run in paragraph.runs:
                            if run.font.bold:
                                has_headers = True
                                break
                        if has_headers:
                            break
                    if has_headers:
                        break
                
                if not has_headers and len(table.rows) > 1:
                    report.add_issue(ValidationIssue(
                        type="warning",
                        category="tables",
                        description="–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫",
                        location=table_location,
                        expected="–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –≤—ã–¥–µ–ª–µ–Ω—ã –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º",
                        actual="–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–∞",
                        suggestion="–í—ã–¥–µ–ª–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –∏–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ —Å—Ç–∏–ª—å '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã'"
                    ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ç–∞–±–ª–∏—Ü–µ
            self._check_table_caption(doc, i, report)

    def _check_table_caption(self, doc: Document, table_index: int, report: ValidationReport):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            # –ò—â–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –¥–æ –∏ –ø–æ—Å–ª–µ —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—è–º–∏
            found_caption = False
            
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –∏—â–µ–º —Ç–µ–∫—Å—Ç —Å "–¢–∞–±–ª–∏—Ü–∞" —Ä—è–¥–æ–º —Å —Ç–∞–±–ª–∏—Ü–µ–π
            for paragraph in doc.paragraphs:
                text = paragraph.text.strip().upper()
                if "–¢–ê–ë–õ–ò–¶–ê" in text and str(table_index + 1) in text:
                    found_caption = True
                    break
            
            if not found_caption:
                report.add_issue(ValidationIssue(
                    type="info",
                    category="tables",
                    description=f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å –∫ —Ç–∞–±–ª–∏—Ü–µ {table_index + 1}",
                    location=f"–¢–∞–±–ª–∏—Ü–∞ {table_index + 1}",
                    expected="–ü–æ–¥–ø–∏—Å—å –≤–∏–¥–∞ '–¢–∞–±–ª–∏—Ü–∞ 1 - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã'",
                    actual="–ü–æ–¥–ø–∏—Å—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞",
                    suggestion="–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ —Ç–∞–±–ª–∏—Ü–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ì–û–°–¢ (–ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π –∏–ª–∏ –ø–æ—Å–ª–µ –Ω–µ—ë)"
                ))
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

    def _validate_document_structure(self, doc: Document, report: ValidationReport):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        heading_levels = []
        for paragraph in doc.paragraphs:
            text = paragraph.text.strip()
            if not text:
                continue
                
            paragraph_type = self.classifier.classify_paragraph_by_style(paragraph, text)
            if paragraph_type in ["h1", "h2", "h3", "h4"]:
                level = int(paragraph_type[1])
                heading_levels.append(level)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for i in range(1, len(heading_levels)):
            current_level = heading_levels[i]
            prev_level = heading_levels[i-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1
            if current_level > prev_level + 1:
                report.add_issue(ValidationIssue(
                    type="warning",
                    category="structure",
                    description=f"–ü—Ä–æ–ø—É—â–µ–Ω —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: —Å H{prev_level} —Å—Ä–∞–∑—É –Ω–∞ H{current_level}",
                    location=f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Ññ{i+1}",
                    expected=f"H{prev_level+1} –∏–ª–∏ –º–µ–Ω—å—à–µ",
                    actual=f"H{current_level}",
                    suggestion=f"–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –Ω–∞ H{prev_level+1}"
                ))
    
    def _collect_statistics(self, doc: Document) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        stats = {
            "total_paragraphs": len(doc.paragraphs),
            "total_tables": len(doc.tables),
            "total_sections": len(doc.sections),
            "heading_counts": {"h1": 0, "h2": 0, "h3": 0, "h4": 0},
            "list_items": 0,
            "regular_paragraphs": 0,
            "empty_paragraphs": 0
        }
        
        for paragraph in doc.paragraphs:
            text = paragraph.text.strip()
            if not text:
                stats["empty_paragraphs"] += 1
                continue
                
            paragraph_type = self.classifier.classify_paragraph_by_style(paragraph, text)
            if paragraph_type in stats["heading_counts"]:
                stats["heading_counts"][paragraph_type] += 1
            elif paragraph_type == "list":
                stats["list_items"] += 1
            elif paragraph_type == "regular":
                stats["regular_paragraphs"] += 1
        
        return stats

    def _check_page_numbering(self, doc: Document, report: ValidationReport):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü"""
        try:
            has_page_numbers = False
            for section in doc.sections:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
                if section.header or section.footer:
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª–∞—Ö
                    if (section.header and section.header.paragraphs and 
                        any(p.text.strip() for p in section.header.paragraphs)):
                        has_page_numbers = True
                        break
                    if (section.footer and section.footer.paragraphs and 
                        any(p.text.strip() for p in section.footer.paragraphs)):
                        has_page_numbers = True
                        break
            
            if not has_page_numbers:
                report.add_issue(ValidationIssue(
                    type="info",
                    category="structure",
                    description="–ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞",
                    location="–ö–æ–ª–æ–Ω—Ç–∏—Ç—É–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                    expected="–ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –≤–µ—Ä—Ö–Ω–µ–º –∏–ª–∏ –Ω–∏–∂–Ω–µ–º –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª–µ",
                    actual="–ö–æ–ª–æ–Ω—Ç–∏—Ç—É–ª—ã –ø—É—Å—Ç—ã–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    suggestion="–î–æ–±–∞–≤—å—Ç–µ –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü —á–µ—Ä–µ–∑ –í—Å—Ç–∞–≤–∫–∞ ‚Üí –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                ))
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")


def validate_vkr_document(input_path: str, requirements: Dict[str, Any]) -> Tuple[bool, ValidationReport]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –í–ö–† –¥–æ–∫—É–º–µ–Ω—Ç
    
    Returns:
        Tuple[bool, ValidationReport]: (—É—Å–ø–µ—Ö, –æ—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
    """
    try:
        validator = DocumentValidator(requirements)
        report = validator.validate_document(input_path)
        
        # –°—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ–π, –µ—Å–ª–∏ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        success = report.errors == 0
        
        return success, report
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        error_report = ValidationReport()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ Pydantic
        error_report.statistics = {
            "total_paragraphs": 0,
            "total_tables": 0,
            "total_sections": 0,
            "heading_counts": {"h1": 0, "h2": 0, "h3": 0, "h4": 0},
            "list_items": 0,
            "regular_paragraphs": 0,
            "empty_paragraphs": 0
        }
        error_report.add_issue(ValidationIssue(
            type="error",
            category="system",
            description=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
            location="–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞",
            expected="–£—Å–ø–µ—à–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è",
            actual=str(e)
        ))
        return False, error_report 